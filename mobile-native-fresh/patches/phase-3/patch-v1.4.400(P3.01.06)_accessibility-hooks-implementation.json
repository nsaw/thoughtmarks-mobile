{
  "patchId": "patch-v1.4.400(P3.01.06)_accessibility-hooks-implementation",
  "version": "v1.4.400",
  "phase": 3,
  "step": "3.01.06",
  "description": "Accessibility Hooks Implementation",
  "priority": "high",
  "risk": "low",
  "estimatedTime": "1-2 hours",
  "dependencies": [
    "patch-v1.4.400(P3.01.01)_autoroleview-enhancement",
    "patch-v1.4.400(P3.01.02)_performance-monitor-fix",
    "patch-v1.4.400(P3.01.03)_validation-system-fix",
    "patch-v1.4.400(P3.01.04)_environment-system-fix",
    "patch-v1.4.400(P3.01.05)_theme-system-implementation"
  ],
  "validationGates": [
    "typescript",
    "eslint",
    "accessibility",
    "dual-mount-toggle"
  ],
  "successCriteria": [
    "Accessibility hooks properly implemented",
    "High contrast detection works",
    "Screen reader support enabled",
    "No TypeScript errors in accessibility files",
    "All accessibility tests pass"
  ],
  "rollbackPlan": "Revert to basic accessibility support",
  "gitTag": "v1.4.400-P3.01.06",
  "summaryFile": "mobile-native-fresh/tasks/summaries/patch-v1.4.400(P3.01.06)_accessibility-hooks-implementation.md",
  "branch": "phase-3-accessibility-hooks",
  "preMutationBuild": "npm run lint:guard && npx tsc --noEmit",
  "postMutationBuild": "npm run lint:guard && npx tsc --noEmit && npm run test:accessibility",
  "mutations": [
    {
      "file": "mobile-native-fresh/src-nextgen/hooks/useAccessibility.ts",
      "description": "Create comprehensive accessibility hook with proper TypeScript types",
      "content": "import { useState, useEffect } from 'react';\nimport { AccessibilityInfo, AccessibilityRole, AccessibilityState } from 'react-native';\n\nexport interface AccessibilityConfig {\n  isHighContrastEnabled: boolean;\n  isScreenReaderEnabled: boolean;\n  isReduceMotionEnabled: boolean;\n  isReduceTransparencyEnabled: boolean;\n  isInvertColorsEnabled: boolean;\n  isBoldTextEnabled: boolean;\n  isGrayscaleEnabled: boolean;\n  isLargeTextEnabled: boolean;\n}\n\nexport interface AccessibilityProps {\n  accessible?: boolean;\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  accessibilityRole?: AccessibilityRole;\n  accessibilityState?: AccessibilityState;\n  accessibilityValue?: {\n    min?: number;\n    max?: number;\n    now?: number;\n    text?: string;\n  };\n  accessibilityActions?: Array<{\n    name: string;\n    label?: string;\n  }>;\n  onAccessibilityAction?: (event: { nativeEvent: { actionName: string } }) => void;\n  importantForAccessibility?: 'auto' | 'yes' | 'no' | 'no-hide-descendants';\n}\n\nexport const useAccessibility = (): AccessibilityConfig => {\n  const [config, setConfig] = useState<AccessibilityConfig>({\n    isHighContrastEnabled: false,\n    isScreenReaderEnabled: false,\n    isReduceMotionEnabled: false,\n    isReduceTransparencyEnabled: false,\n    isInvertColorsEnabled: false,\n    isBoldTextEnabled: false,\n    isGrayscaleEnabled: false,\n    isLargeTextEnabled: false,\n  });\n\n  useEffect(() => {\n    const updateAccessibilityConfig = async () => {\n      try {\n        const [\n          isHighContrastEnabled,\n          isScreenReaderEnabled,\n          isReduceMotionEnabled,\n          isReduceTransparencyEnabled,\n          isInvertColorsEnabled,\n          isBoldTextEnabled,\n          isGrayscaleEnabled,\n          isLargeTextEnabled,\n        ] = await Promise.all([\n          AccessibilityInfo.isHighContrastEnabled(),\n          AccessibilityInfo.isScreenReaderEnabled(),\n          AccessibilityInfo.isReduceMotionEnabled(),\n          AccessibilityInfo.isReduceTransparencyEnabled(),\n          AccessibilityInfo.isInvertColorsEnabled(),\n          AccessibilityInfo.isBoldTextEnabled(),\n          AccessibilityInfo.isGrayscaleEnabled(),\n          AccessibilityInfo.isLargeTextEnabled(),\n        ]);\n\n        setConfig({\n          isHighContrastEnabled,\n          isScreenReaderEnabled,\n          isReduceMotionEnabled,\n          isReduceTransparencyEnabled,\n          isInvertColorsEnabled,\n          isBoldTextEnabled,\n          isGrayscaleEnabled,\n          isLargeTextEnabled,\n        });\n      } catch (error) {\n        console.warn('Failed to get accessibility configuration:', error);\n      }\n    };\n\n    updateAccessibilityConfig();\n\n    const highContrastListener = AccessibilityInfo.addEventListener(\n      'highContrastDidChange',\n      (isHighContrastEnabled: boolean) => {\n        setConfig(prev => ({ ...prev, isHighContrastEnabled }));\n      }\n    );\n\n    const screenReaderListener = AccessibilityInfo.addEventListener(\n      'screenReaderChanged',\n      (isScreenReaderEnabled: boolean) => {\n        setConfig(prev => ({ ...prev, isScreenReaderEnabled }));\n      }\n    );\n\n    const reduceMotionListener = AccessibilityInfo.addEventListener(\n      'reduceMotionChanged',\n      (isReduceMotionEnabled: boolean) => {\n        setConfig(prev => ({ ...prev, isReduceMotionEnabled }));\n      }\n    );\n\n    const reduceTransparencyListener = AccessibilityInfo.addEventListener(\n      'reduceTransparencyChanged',\n      (isReduceTransparencyEnabled: boolean) => {\n        setConfig(prev => ({ ...prev, isReduceTransparencyEnabled }));\n      }\n    );\n\n    const invertColorsListener = AccessibilityInfo.addEventListener(\n      'invertColorsChanged',\n      (isInvertColorsEnabled: boolean) => {\n        setConfig(prev => ({ ...prev, isInvertColorsEnabled }));\n      }\n    );\n\n    const boldTextListener = AccessibilityInfo.addEventListener(\n      'boldTextChanged',\n      (isBoldTextEnabled: boolean) => {\n        setConfig(prev => ({ ...prev, isBoldTextEnabled }));\n      }\n    );\n\n    const grayscaleListener = AccessibilityInfo.addEventListener(\n      'grayscaleChanged',\n      (isGrayscaleEnabled: boolean) => {\n        setConfig(prev => ({ ...prev, isGrayscaleEnabled }));\n      }\n    );\n\n    const largeTextListener = AccessibilityInfo.addEventListener(\n      'largeTextChanged',\n      (isLargeTextEnabled: boolean) => {\n        setConfig(prev => ({ ...prev, isLargeTextEnabled }));\n      }\n    );\n\n    return () => {\n      highContrastListener?.remove();\n      screenReaderListener?.remove();\n      reduceMotionListener?.remove();\n      reduceTransparencyListener?.remove();\n      invertColorsListener?.remove();\n      boldTextListener?.remove();\n      grayscaleListener?.remove();\n      largeTextListener?.remove();\n    };\n  }, []);\n\n  return config;\n};"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/hooks/useAccessibilityProps.ts",
      "description": "Create hook for generating accessibility props based on role and state",
      "content": "import { useMemo } from 'react';\nimport { AccessibilityProps, AccessibilityRole, AccessibilityState } from './useAccessibility';\nimport { useAccessibility } from './useAccessibility';\n\nexport interface UseAccessibilityPropsOptions {\n  role?: AccessibilityRole;\n  label?: string;\n  hint?: string;\n  state?: AccessibilityState;\n  value?: {\n    min?: number;\n    max?: number;\n    now?: number;\n    text?: string;\n  };\n  actions?: Array<{\n    name: string;\n    label?: string;\n  }>;\n  onAction?: (actionName: string) => void;\n  importantForAccessibility?: 'auto' | 'yes' | 'no' | 'no-hide-descendants';\n}\n\nexport const useAccessibilityProps = (options: UseAccessibilityPropsOptions = {}): AccessibilityProps => {\n  const { isScreenReaderEnabled } = useAccessibility();\n\n  return useMemo(() => {\n    const {\n      role,\n      label,\n      hint,\n      state,\n      value,\n      actions,\n      onAction,\n      importantForAccessibility = 'auto',\n    } = options;\n\n    const props: AccessibilityProps = {\n      accessible: true,\n      importantForAccessibility,\n    };\n\n    if (label) {\n      props.accessibilityLabel = label;\n    }\n\n    if (hint) {\n      props.accessibilityHint = hint;\n    }\n\n    if (role) {\n      props.accessibilityRole = role;\n    }\n\n    if (state) {\n      props.accessibilityState = state;\n    }\n\n    if (value) {\n      props.accessibilityValue = value;\n    }\n\n    if (actions && actions.length > 0) {\n      props.accessibilityActions = actions;\n    }\n\n    if (onAction) {\n      props.onAccessibilityAction = (event) => {\n        onAction(event.nativeEvent.actionName);\n      };\n    }\n\n    // Only apply accessibility props if screen reader is enabled or explicitly requested\n    if (!isScreenReaderEnabled && importantForAccessibility === 'auto') {\n      props.accessible = false;\n    }\n\n    return props;\n  }, [options, isScreenReaderEnabled]);\n};"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/utils/accessibilityUtils.ts",
      "description": "Create utility functions for accessibility features",
      "content": "import { AccessibilityInfo } from 'react-native';\nimport { AccessibilityConfig } from '../hooks/useAccessibility';\n\nexport const announceForAccessibility = (announcement: string): void => {\n  AccessibilityInfo.announceForAccessibility(announcement);\n};\n\nexport const setAccessibilityFocus = (reactTag: number): void => {\n  AccessibilityInfo.setAccessibilityFocus(reactTag);\n};\n\nexport const getRecommendedTimeoutMillis = (): Promise<number> => {\n  return AccessibilityInfo.getRecommendedTimeoutMillis();\n};\n\nexport const getRecommendedTimeoutMillisSync = (): number => {\n  return AccessibilityInfo.getRecommendedTimeoutMillisSync();\n};\n\nexport const shouldShowAccessibilityMenu = (): boolean => {\n  return AccessibilityInfo.shouldShowAccessibilityMenu();\n};\n\nexport const getAccessibilityConfig = async (): Promise<AccessibilityConfig> => {\n  const [\n    isHighContrastEnabled,\n    isScreenReaderEnabled,\n    isReduceMotionEnabled,\n    isReduceTransparencyEnabled,\n    isInvertColorsEnabled,\n    isBoldTextEnabled,\n    isGrayscaleEnabled,\n    isLargeTextEnabled,\n  ] = await Promise.all([\n    AccessibilityInfo.isHighContrastEnabled(),\n    AccessibilityInfo.isScreenReaderEnabled(),\n    AccessibilityInfo.isReduceMotionEnabled(),\n    AccessibilityInfo.isReduceTransparencyEnabled(),\n    AccessibilityInfo.isInvertColorsEnabled(),\n    AccessibilityInfo.isBoldTextEnabled(),\n    AccessibilityInfo.isGrayscaleEnabled(),\n    AccessibilityInfo.isLargeTextEnabled(),\n  ]);\n\n  return {\n    isHighContrastEnabled,\n    isScreenReaderEnabled,\n    isReduceMotionEnabled,\n    isReduceTransparencyEnabled,\n    isInvertColorsEnabled,\n    isBoldTextEnabled,\n    isGrayscaleEnabled,\n    isLargeTextEnabled,\n  };\n};\n\nexport const generateAccessibilityLabel = (\n  text: string,\n  role?: string,\n  state?: string\n): string => {\n  let label = text;\n  \n  if (role) {\n    label += `, ${role}`;\n  }\n  \n  if (state) {\n    label += `, ${state}`;\n  }\n  \n  return label;\n};\n\nexport const shouldReduceMotion = (config: AccessibilityConfig): boolean => {\n  return config.isReduceMotionEnabled;\n};\n\nexport const shouldReduceTransparency = (config: AccessibilityConfig): boolean => {\n  return config.isReduceTransparencyEnabled;\n};\nexport const shouldInvertColors = (config: AccessibilityConfig): boolean => {\n  return config.isInvertColorsEnabled;\n};\n\nexport const shouldUseBoldText = (config: AccessibilityConfig): boolean => {\n  return config.isBoldTextEnabled;\n};\n\nexport const shouldUseGrayscale = (config: AccessibilityConfig): boolean => {\n  return config.isGrayscaleEnabled;\n};\n\nexport const shouldUseLargeText = (config: AccessibilityConfig): boolean => {\n  return config.isLargeTextEnabled;\n};"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/hooks/index.ts",
      "description": "Update hooks index to export accessibility hooks",
      "content": "export * from './useAccessibility';\nexport * from './useAccessibilityProps';\n\nexport { useAccessibility } from './useAccessibility';\nexport { useAccessibilityProps } from './useAccessibilityProps';"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/utils/index.ts",
      "description": "Update utils index to export accessibility utilities",
      "code_edit": "// ... existing code ...\nexport * from './accessibilityUtils';\n\nexport {\n  announceForAccessibility,\n  setAccessibilityFocus,\n  getRecommendedTimeoutMillis,\n  getRecommendedTimeoutMillisSync,\n  shouldShowAccessibilityMenu,\n  getAccessibilityConfig,\n  generateAccessibilityLabel,\n  shouldReduceMotion,\n  shouldReduceTransparency,\n  shouldInvertColors,\n  shouldUseBoldText,\n  shouldUseGrayscale,\n  shouldUseLargeText,\n} from './accessibilityUtils';"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/hooks/useAccessibility.test.ts",
      "description": "Create comprehensive tests for useAccessibility hook",
      "content": "import { renderHook, act } from '@testing-library/react-native';\nimport { AccessibilityInfo } from 'react-native';\nimport { useAccessibility } from './useAccessibility';\n\n// Mock AccessibilityInfo\njest.mock('react-native', () => ({\n  ...jest.requireActual('react-native'),\n  AccessibilityInfo: {\n    isHighContrastEnabled: jest.fn(),\n    isScreenReaderEnabled: jest.fn(),\n    isReduceMotionEnabled: jest.fn(),\n    isReduceTransparencyEnabled: jest.fn(),\n    isInvertColorsEnabled: jest.fn(),\n    isBoldTextEnabled: jest.fn(),\n    isGrayscaleEnabled: jest.fn(),\n    isLargeTextEnabled: jest.fn(),\n    addEventListener: jest.fn(),\n  },\n}));\n\nconst mockAddEventListener = AccessibilityInfo.addEventListener as jest.MockedFunction<\n  typeof AccessibilityInfo.addEventListener\n>;\n\ndescribe('useAccessibility', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock initial accessibility state\n    (AccessibilityInfo.isHighContrastEnabled as jest.Mock).mockResolvedValue(false);\n    (AccessibilityInfo.isScreenReaderEnabled as jest.Mock).mockResolvedValue(false);\n    (AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(false);\n    (AccessibilityInfo.isReduceTransparencyEnabled as jest.Mock).mockResolvedValue(false);\n    (AccessibilityInfo.isInvertColorsEnabled as jest.Mock).mockResolvedValue(false);\n    (AccessibilityInfo.isBoldTextEnabled as jest.Mock).mockResolvedValue(false);\n    (AccessibilityInfo.isGrayscaleEnabled as jest.Mock).mockResolvedValue(false);\n    (AccessibilityInfo.isLargeTextEnabled as jest.Mock).mockResolvedValue(false);\n    \n    mockAddEventListener.mockReturnValue({ remove: jest.fn() });\n  });\n\n  it('should return initial accessibility configuration', async () => {\n    const { result } = renderHook(() => useAccessibility());\n    \n    expect(result.current).toEqual({\n      isHighContrastEnabled: false,\n      isScreenReaderEnabled: false,\n      isReduceMotionEnabled: false,\n      isReduceTransparencyEnabled: false,\n      isInvertColorsEnabled: false,\n      isBoldTextEnabled: false,\n      isGrayscaleEnabled: false,\n      isLargeTextEnabled: false,\n    });\n  });\n\n  it('should set up accessibility event listeners', () => {\n    renderHook(() => useAccessibility());\n    \n    expect(mockAddEventListener).toHaveBeenCalledWith(\n      'highContrastDidChange',\n      expect.any(Function)\n    );\n    expect(mockAddEventListener).toHaveBeenCalledWith(\n      'screenReaderChanged',\n      expect.any(Function)\n    );\n    expect(mockAddEventListener).toHaveBeenCalledWith(\n      'reduceMotionChanged',\n      expect.any(Function)\n    );\n    expect(mockAddEventListener).toHaveBeenCalledWith(\n      'reduceTransparencyChanged',\n      expect.any(Function)\n    );\n    expect(mockAddEventListener).toHaveBeenCalledWith(\n      'invertColorsChanged',\n      expect.any(Function)\n    );\n    expect(mockAddEventListener).toHaveBeenCalledWith(\n      'boldTextChanged',\n      expect.any(Function)\n    );\n    expect(mockAddEventListener).toHaveBeenCalledWith(\n      'grayscaleChanged',\n      expect.any(Function)\n    );\n    expect(mockAddEventListener).toHaveBeenCalledWith(\n      'largeTextChanged',\n      expect.any(Function)\n    );\n  });\n\n  it('should handle accessibility state changes', async () => {\n    const { result } = renderHook(() => useAccessibility());\n    \n    // Get the callback functions from the event listeners\n    const highContrastCallback = mockAddEventListener.mock.calls.find(\n      call => call[0] === 'highContrastDidChange'\n    )?.[1] as (enabled: boolean) => void;\n    \n    const screenReaderCallback = mockAddEventListener.mock.calls.find(\n      call => call[0] === 'screenReaderChanged'\n    )?.[1] as (enabled: boolean) => void;\n    \n    expect(highContrastCallback).toBeDefined();\n    expect(screenReaderCallback).toBeDefined();\n    \n    // Simulate accessibility state changes\n    act(() => {\n      highContrastCallback?.(true);\n      screenReaderCallback?.(true);\n    });\n    \n    expect(result.current.isHighContrastEnabled).toBe(true);\n    expect(result.current.isScreenReaderEnabled).toBe(true);\n  });\n});"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/hooks/useAccessibilityProps.test.ts",
      "description": "Create comprehensive tests for useAccessibilityProps hook",
      "content": "import { renderHook } from '@testing-library/react-native';\nimport { useAccessibilityProps } from './useAccessibilityProps';\nimport { useAccessibility } from './useAccessibility';\n\n// Mock useAccessibility\njest.mock('./useAccessibility', () => ({\n  useAccessibility: jest.fn(),\n}));\n\nconst mockUseAccessibility = useAccessibility as jest.MockedFunction<typeof useAccessibility>;\n\ndescribe('useAccessibilityProps', () => {\n  beforeEach(() => {\n    mockUseAccessibility.mockReturnValue({\n      isScreenReaderEnabled: true,\n      isHighContrastEnabled: false,\n      isReduceMotionEnabled: false,\n      isReduceTransparencyEnabled: false,\n      isInvertColorsEnabled: false,\n      isBoldTextEnabled: false,\n      isGrayscaleEnabled: false,\n      isLargeTextEnabled: false,\n    });\n  });\n\n  it('should generate basic accessibility props', () => {\n    const { result } = renderHook(() =>\n      useAccessibilityProps({\n        role: 'button',\n        label: 'Test Button',\n        hint: 'Press to test',\n      })\n    );\n    \n    expect(result.current).toEqual({\n      accessible: true,\n      accessibilityRole: 'button',\n      accessibilityLabel: 'Test Button',\n      accessibilityHint: 'Press to test',\n      importantForAccessibility: 'auto',\n    });\n  });\n\n  it('should include accessibility state', () => {\n    const { result } = renderHook(() =>\n      useAccessibilityProps({\n        role: 'checkbox',\n        label: 'Test Checkbox',\n        state: { checked: true },\n      })\n    );\n    \n    expect(result.current.accessibilityState).toEqual({ checked: true });\n  });\n\n  it('should include accessibility value', () => {\n    const { result } = renderHook(() =>\n      useAccessibilityProps({\n        role: 'slider',\n        label: 'Test Slider',\n        value: { min: 0, max: 100, now: 50 },\n      })\n    );\n    \n    expect(result.current.accessibilityValue).toEqual({\n      min: 0,\n      max: 100,\n      now: 50,\n    });\n  });\n\n  it('should include accessibility actions', () => {\n    const onAction = jest.fn();\n    const { result } = renderHook(() =>\n      useAccessibilityProps({\n        role: 'button',\n        label: 'Test Button',\n        actions: [{ name: 'activate', label: 'Activate' }],\n        onAction,\n      })\n    );\n    \n    expect(result.current.accessibilityActions).toEqual([\n      { name: 'activate', label: 'Activate' },\n    ]);\n    expect(result.current.onAccessibilityAction).toBeDefined();\n  });\n\n  it('should disable accessibility when screen reader is disabled', () => {\n    mockUseAccessibility.mockReturnValue({\n      isScreenReaderEnabled: false,\n      isHighContrastEnabled: false,\n      isReduceMotionEnabled: false,\n      isReduceTransparencyEnabled: false,\n      isInvertColorsEnabled: false,\n      isBoldTextEnabled: false,\n      isGrayscaleEnabled: false,\n      isLargeTextEnabled: false,\n    });\n    \n    const { result } = renderHook(() =>\n      useAccessibilityProps({\n        role: 'button',\n        label: 'Test Button',\n      })\n    );\n    \n    expect(result.current.accessible).toBe(false);\n  });\n\n  it('should force accessibility when importantForAccessibility is yes', () => {\n    mockUseAccessibility.mockReturnValue({\n      isScreenReaderEnabled: false,\n      isHighContrastEnabled: false,\n      isReduceMotionEnabled: false,\n      isReduceTransparencyEnabled: false,\n      isInvertColorsEnabled: false,\n      isBoldTextEnabled: false,\n      isGrayscaleEnabled: false,\n      isLargeTextEnabled: false,\n    });\n    \n    const { result } = renderHook(() =>\n      useAccessibilityProps({\n        role: 'button',\n        label: 'Test Button',\n        importantForAccessibility: 'yes',\n      })\n    );\n    \n    expect(result.current.accessible).toBe(true);\n  });\n});"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/utils/accessibilityUtils.test.ts",
      "description": "Create comprehensive tests for accessibility utilities",
      "content": "import { AccessibilityInfo } from 'react-native';\nimport {\n  announceForAccessibility,\n  setAccessibilityFocus,\n  getRecommendedTimeoutMillis,\n  getRecommendedTimeoutMillisSync,\n  shouldShowAccessibilityMenu,\n  getAccessibilityConfig,\n  generateAccessibilityLabel,\n  shouldReduceMotion,\n  shouldReduceTransparency,\n  shouldInvertColors,\n  shouldUseBoldText,\n  shouldUseGrayscale,\n  shouldUseLargeText,\n} from './accessibilityUtils';\n\n// Mock AccessibilityInfo\njest.mock('react-native', () => ({\n  ...jest.requireActual('react-native'),\n  AccessibilityInfo: {\n    announceForAccessibility: jest.fn(),\n    setAccessibilityFocus: jest.fn(),\n    getRecommendedTimeoutMillis: jest.fn(),\n    getRecommendedTimeoutMillisSync: jest.fn(),\n    shouldShowAccessibilityMenu: jest.fn(),\n    isHighContrastEnabled: jest.fn(),\n    isScreenReaderEnabled: jest.fn(),\n    isReduceMotionEnabled: jest.fn(),\n    isReduceTransparencyEnabled: jest.fn(),\n    isInvertColorsEnabled: jest.fn(),\n    isBoldTextEnabled: jest.fn(),\n    isGrayscaleEnabled: jest.fn(),\n    isLargeTextEnabled: jest.fn(),\n  },\n}));\n\ndescribe('accessibilityUtils', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('announceForAccessibility', () => {\n    it('should call AccessibilityInfo.announceForAccessibility', () => {\n      announceForAccessibility('Test announcement');\n      expect(AccessibilityInfo.announceForAccessibility).toHaveBeenCalledWith('Test announcement');\n    });\n  });\n\n  describe('setAccessibilityFocus', () => {\n    it('should call AccessibilityInfo.setAccessibilityFocus', () => {\n      setAccessibilityFocus(123);\n      expect(AccessibilityInfo.setAccessibilityFocus).toHaveBeenCalledWith(123);\n    });\n  });\n\n  describe('getRecommendedTimeoutMillis', () => {\n    it('should call AccessibilityInfo.getRecommendedTimeoutMillis', async () => {\n      (AccessibilityInfo.getRecommendedTimeoutMillis as jest.Mock).mockResolvedValue(5000);\n      const result = await getRecommendedTimeoutMillis();\n      expect(AccessibilityInfo.getRecommendedTimeoutMillis).toHaveBeenCalled();\n      expect(result).toBe(5000);\n    });\n  });\n\n  describe('getRecommendedTimeoutMillisSync', () => {\n    it('should call AccessibilityInfo.getRecommendedTimeoutMillisSync', () => {\n      (AccessibilityInfo.getRecommendedTimeoutMillisSync as jest.Mock).mockReturnValue(5000);\n      const result = getRecommendedTimeoutMillisSync();\n      expect(AccessibilityInfo.getRecommendedTimeoutMillisSync).toHaveBeenCalled();\n      expect(result).toBe(5000);\n    });\n  });\n\n  describe('shouldShowAccessibilityMenu', () => {\n    it('should call AccessibilityInfo.shouldShowAccessibilityMenu', () => {\n      (AccessibilityInfo.shouldShowAccessibilityMenu as jest.Mock).mockReturnValue(true);\n      const result = shouldShowAccessibilityMenu();\n      expect(AccessibilityInfo.shouldShowAccessibilityMenu).toHaveBeenCalled();\n      expect(result).toBe(true);\n    });\n  });\n\n  describe('getAccessibilityConfig', () => {\n    it('should return accessibility configuration', async () => {\n      const mockConfig = {\n        isHighContrastEnabled: true,\n        isScreenReaderEnabled: true,\n        isReduceMotionEnabled: false,\n        isReduceTransparencyEnabled: false,\n        isInvertColorsEnabled: false,\n        isBoldTextEnabled: false,\n        isGrayscaleEnabled: false,\n        isLargeTextEnabled: false,\n      };\n\n      (AccessibilityInfo.isHighContrastEnabled as jest.Mock).mockResolvedValue(mockConfig.isHighContrastEnabled);\n      (AccessibilityInfo.isScreenReaderEnabled as jest.Mock).mockResolvedValue(mockConfig.isScreenReaderEnabled);\n      (AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(mockConfig.isReduceMotionEnabled);\n      (AccessibilityInfo.isReduceTransparencyEnabled as jest.Mock).mockResolvedValue(mockConfig.isReduceTransparencyEnabled);\n      (AccessibilityInfo.isInvertColorsEnabled as jest.Mock).mockResolvedValue(mockConfig.isInvertColorsEnabled);\n      (AccessibilityInfo.isBoldTextEnabled as jest.Mock).mockResolvedValue(mockConfig.isBoldTextEnabled);\n      (AccessibilityInfo.isGrayscaleEnabled as jest.Mock).mockResolvedValue(mockConfig.isGrayscaleEnabled);\n      (AccessibilityInfo.isLargeTextEnabled as jest.Mock).mockResolvedValue(mockConfig.isLargeTextEnabled);\n\n      const result = await getAccessibilityConfig();\n      expect(result).toEqual(mockConfig);\n    });\n  });\n\n  describe('generateAccessibilityLabel', () => {\n    it('should generate label with text only', () => {\n      const result = generateAccessibilityLabel('Test Button');\n      expect(result).toBe('Test Button');\n    });\n\n    it('should generate label with text and role', () => {\n      const result = generateAccessibilityLabel('Test Button', 'button');\n      expect(result).toBe('Test Button, button');\n    });\n\n    it('should generate label with text, role, and state', () => {\n      const result = generateAccessibilityLabel('Test Button', 'button', 'pressed');\n      expect(result).toBe('Test Button, button, pressed');\n    });\n  });\n\n  describe('accessibility state helpers', () => {\n    const mockConfig = {\n      isHighContrastEnabled: true,\n      isScreenReaderEnabled: true,\n      isReduceMotionEnabled: true,\n      isReduceTransparencyEnabled: true,\n      isInvertColorsEnabled: true,\n      isBoldTextEnabled: true,\n      isGrayscaleEnabled: true,\n      isLargeTextEnabled: true,\n    };\n\n    it('should check if motion should be reduced', () => {\n      expect(shouldReduceMotion(mockConfig)).toBe(true);\n    });\n\n    it('should check if transparency should be reduced', () => {\n      expect(shouldReduceTransparency(mockConfig)).toBe(true);\n    });\n\n    it('should check if colors should be inverted', () => {\n      expect(shouldInvertColors(mockConfig)).toBe(true);\n    });\n\n    it('should check if bold text should be used', () => {\n      expect(shouldUseBoldText(mockConfig)).toBe(true);\n    });\n\n    it('should check if grayscale should be used', () => {\n      expect(shouldUseGrayscale(mockConfig)).toBe(true);\n    });\n\n    it('should check if large text should be used', () => {\n      expect(shouldUseLargeText(mockConfig)).toBe(true);\n    });\n  });\n});"
    }
  ]
} 