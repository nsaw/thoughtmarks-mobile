{
  "patchId": "patch-v1.4.420(P3.03.01)_text-components-migration",
  "version": "v1.4.420",
  "phase": 3,
  "step": "3.03.01",
  "description": "Text Components Migration",
  "priority": "high",
  "risk": "medium",
  "estimatedTime": "2-3 hours",
  "dependencies": [
    "patch-v1.4.410(P3.02.01)_core-types-definition",
    "patch-v1.4.410(P3.02.02)_core-hooks-implementation",
    "patch-v1.4.410(P3.02.03)_api-service-implementation"
  ],
  "validationGates": [
    "typescript",
    "eslint",
    "visual-regression",
    "accessibility",
    "dual-mount-toggle"
  ],
  "successCriteria": [
    "All text components migrated to nextgen",
    "Typography system working",
    "Accessibility support enabled",
    "Theme integration working",
    "Text component tests pass"
  ],
  "rollbackPlan": "Revert to legacy text components",
  "gitTag": "v1.4.420-P3.03.01",
  "summaryFile": "/Users/sawyer/gitSync/.cursor-cache/MAIN/summaries/patch-v1.4.420(P3.03.01)_text-components-migration.md",
  "branch": "phase-3-text-components",
  "preMutationBuild": "npm run lint:guard && npx tsc --noEmit",
  "postMutationBuild": "npm run lint:guard && npx tsc --noEmit && npm run test:text-components",
  "mutations": [
    {
      "file": "mobile-native-fresh/src-nextgen/components/text/Text.tsx",
      "description": "Create base Text component with theme integration",
      "content": "import React from 'react';\nimport { Text as RNText, TextProps as RNTextProps, StyleSheet } from 'react-native';\nimport { useTheme } from '../../theme';\nimport { useAccessibilityProps } from '../../hooks/useAccessibilityProps';\nimport { AutoRoleView } from '../AutoRoleView';\n\nexport interface TextProps extends RNTextProps {\n  variant?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'body' | 'body2' | 'caption' | 'overline';\n  weight?: 'normal' | 'medium' | 'semibold' | 'bold';\n  color?: 'primary' | 'secondary' | 'tertiary' | 'error' | 'success' | 'warning' | 'info';\n  align?: 'left' | 'center' | 'right' | 'justify';\n  truncate?: boolean;\n  numberOfLines?: number;\n  children: React.ReactNode;\n}\n\nexport const Text: React.FC<TextProps> = ({\n  variant = 'body',\n  weight = 'normal',\n  color = 'primary',\n  align = 'left',\n  truncate = false,\n  numberOfLines,\n  style,\n  children,\n  ...props\n}) => {\n  const { theme } = useTheme();\n  const accessibilityProps = useAccessibilityProps({\n    role: 'text',\n    label: typeof children === 'string' ? children : undefined,\n  });\n\n  const getTextStyle = () => {\n    const baseStyle = {\n      fontFamily: theme.typography.fontFamily[weight],\n      fontSize: getFontSize(variant),\n      fontWeight: theme.typography.fontWeight[weight],\n      lineHeight: getLineHeight(variant),\n      color: getTextColor(color),\n      textAlign: align,\n    };\n\n    return StyleSheet.create({\n      text: baseStyle,\n    }).text;\n  };\n\n  const getFontSize = (variant: TextProps['variant']) => {\n    switch (variant) {\n      case 'h1': return theme.typography.fontSize['4xl'];\n      case 'h2': return theme.typography.fontSize['3xl'];\n      case 'h3': return theme.typography.fontSize['2xl'];\n      case 'h4': return theme.typography.fontSize.xl;\n      case 'h5': return theme.typography.fontSize.lg;\n      case 'h6': return theme.typography.fontSize.base;\n      case 'body': return theme.typography.fontSize.base;\n      case 'body2': return theme.typography.fontSize.sm;\n      case 'caption': return theme.typography.fontSize.xs;\n      case 'overline': return theme.typography.fontSize.xs;\n      default: return theme.typography.fontSize.base;\n    }\n  };\n\n  const getLineHeight = (variant: TextProps['variant']) => {\n    switch (variant) {\n      case 'h1':\n      case 'h2':\n      case 'h3':\n        return theme.typography.lineHeight.tight;\n      case 'h4':\n      case 'h5':\n      case 'h6':\n        return theme.typography.lineHeight.normal;\n      case 'body':\n      case 'body2':\n        return theme.typography.lineHeight.relaxed;\n      case 'caption':\n      case 'overline':\n        return theme.typography.lineHeight.normal;\n      default:\n        return theme.typography.lineHeight.normal;\n    }\n  };\n\n  const getTextColor = (color: TextProps['color']) => {\n    switch (color) {\n      case 'primary': return theme.colors.text;\n      case 'secondary': return theme.colors.textSecondary;\n      case 'tertiary': return theme.colors.textTertiary;\n      case 'error': return theme.colors.error;\n      case 'success': return theme.colors.success;\n      case 'warning': return theme.colors.warning;\n      case 'info': return theme.colors.info;\n      default: return theme.colors.text;\n    }\n  };\n\n  const textStyle = getTextStyle();\n  const finalNumberOfLines = truncate ? 1 : numberOfLines;\n\n  return (\n    <AutoRoleView {...accessibilityProps}>\n      <RNText\n        style={[textStyle, style]}\n        numberOfLines={finalNumberOfLines}\n        {...props}\n      >\n        {children}\n      </RNText>\n    </AutoRoleView>\n  );\n};"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/components/text/Heading.tsx",
      "description": "Create Heading component for titles",
      "content": "import React from 'react';\nimport { Text, TextProps } from './Text';\n\nexport interface HeadingProps extends Omit<TextProps, 'variant'> {\n  level: 1 | 2 | 3 | 4 | 5 | 6;\n  children: React.ReactNode;\n}\n\nexport const Heading: React.FC<HeadingProps> = ({ level, children, ...props }) => {\n  const getVariant = (level: number): TextProps['variant'] => {\n    switch (level) {\n      case 1: return 'h1';\n      case 2: return 'h2';\n      case 3: return 'h3';\n      case 4: return 'h4';\n      case 5: return 'h5';\n      case 6: return 'h6';\n      default: return 'h1';\n    }\n  };\n\n  const getDefaultWeight = (level: number): TextProps['weight'] => {\n    return level <= 3 ? 'bold' : 'semibold';\n  };\n\n  return (\n    <Text\n      variant={getVariant(level)}\n      weight={props.weight || getDefaultWeight(level)}\n      {...props}\n    >\n      {children}\n    </Text>\n  );\n};"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/components/text/Label.tsx",
      "description": "Create Label component for form labels",
      "content": "import React from 'react';\nimport { Text, TextProps } from './Text';\nimport { useAccessibilityProps } from '../../hooks/useAccessibilityProps';\n\nexport interface LabelProps extends Omit<TextProps, 'variant'> {\n  htmlFor?: string;\n  required?: boolean;\n  children: React.ReactNode;\n}\n\nexport const Label: React.FC<LabelProps> = ({ \n  htmlFor, \n  required = false, \n  children, \n  ...props \n}) => {\n  const accessibilityProps = useAccessibilityProps({\n    role: 'label',\n    label: typeof children === 'string' ? children : undefined,\n  });\n\n  return (\n    <Text\n      variant=\"body2\"\n      weight=\"medium\"\n      color=\"primary\"\n      {...accessibilityProps}\n      {...props}\n    >\n      {children}\n      {required && (\n        <Text variant=\"caption\" color=\"error\" weight=\"bold\">\n          {' *'}\n        </Text>\n      )}\n    </Text>\n  );\n};"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/components/text/Link.tsx",
      "description": "Create Link component for clickable text",
      "content": "import React from 'react';\nimport { TouchableOpacity, TouchableOpacityProps } from 'react-native';\nimport { Text, TextProps } from './Text';\nimport { useTheme } from '../../theme';\nimport { useAccessibilityProps } from '../../hooks/useAccessibilityProps';\n\nexport interface LinkProps extends Omit<TextProps, 'color'> {\n  onPress: () => void;\n  disabled?: boolean;\n  underline?: boolean;\n  children: React.ReactNode;\n  touchableProps?: TouchableOpacityProps;\n}\n\nexport const Link: React.FC<LinkProps> = ({\n  onPress,\n  disabled = false,\n  underline = true,\n  children,\n  touchableProps,\n  style,\n  ...props\n}) => {\n  const { theme } = useTheme();\n  const accessibilityProps = useAccessibilityProps({\n    role: 'link',\n    label: typeof children === 'string' ? children : undefined,\n    hint: 'Double tap to activate',\n  });\n\n  const linkStyle = {\n    textDecorationLine: underline ? 'underline' : 'none' as const,\n    color: disabled ? theme.colors.textTertiary : theme.colors.primary,\n  };\n\n  return (\n    <TouchableOpacity\n      onPress={onPress}\n      disabled={disabled}\n      activeOpacity={0.7}\n      {...touchableProps}\n    >\n      <Text\n        variant=\"body\"\n        weight=\"medium\"\n        style={[linkStyle, style]}\n        {...accessibilityProps}\n        {...props}\n      >\n        {children}\n      </Text>\n    </TouchableOpacity>\n  );\n};"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/components/text/Code.tsx",
      "description": "Create Code component for inline code",
      "content": "import React from 'react';\nimport { Text, TextProps } from './Text';\nimport { useTheme } from '../../theme';\nimport { StyleSheet } from 'react-native';\n\nexport interface CodeProps extends Omit<TextProps, 'variant'> {\n  children: React.ReactNode;\n  block?: boolean;\n}\n\nexport const Code: React.FC<CodeProps> = ({ \n  children, \n  block = false, 
  style, 
  ...props \n}) => {\n  const { theme } = useTheme();\n\n  const codeStyle = StyleSheet.create({\n    code: {\n      fontFamily: theme.typography.fontFamily.monospace,\n      backgroundColor: theme.colors.backgroundSecondary,\n      paddingHorizontal: theme.spacing.xs,\n      paddingVertical: theme.spacing.xs / 2,\n      borderRadius: theme.borderRadius.sm,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    blockCode: {\n      padding: theme.spacing.sm,\n      marginVertical: theme.spacing.xs,\n    },\n  });\n\n  return (\n    <Text\n      variant=\"body2\"\n      weight=\"normal\"\n      color=\"primary\"\n      style={[\n        codeStyle.code,\n        block && codeStyle.blockCode,\n        style\n      ]}\n      {...props}\n    >\n      {children}\n    </Text>\n  );\n};"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/components/text/index.ts",
      "description": "Export text components",
      "content": "export * from './Text';\nexport * from './Heading';\nexport * from './Label';\nexport * from './Link';\nexport * from './Code';\n\nexport { Text } from './Text';\nexport { Heading } from './Heading';\nexport { Label } from './Label';\nexport { Link } from './Link';\nexport { Code } from './Code';"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/components/text/Text.test.tsx",
      "description": "Create tests for Text component",
      "content": "import React from 'react';\nimport { render } from '@testing-library/react-native';\nimport { Text } from './Text';\n\n// Mock theme and accessibility hooks\njest.mock('../../theme', () => ({\n  useTheme: () => ({\n    theme: {\n      typography: {\n        fontFamily: {\n          normal: 'System',\n          medium: 'System',\n          semibold: 'System',\n          bold: 'System',\n        },\n        fontSize: {\n          xs: 12,\n          sm: 14,\n          base: 16,\n          lg: 18,\n          xl: 20,\n          '2xl': 24,\n          '3xl': 30,\n          '4xl': 36,\n        },\n        fontWeight: {\n          normal: '400',\n          medium: '500',\n          semibold: '600',\n          bold: '700',\n        },\n        lineHeight: {\n          tight: 1.2,\n          normal: 1.5,\n          relaxed: 1.75,\n        },\n      },\n      colors: {\n        text: '#000000',\n        textSecondary: '#6C6C70',\n        textTertiary: '#8E8E93',\n        error: '#FF3B30',\n        success: '#34C759',\n        warning: '#FF9500',\n        info: '#007AFF',\n      },\n    },\n  }),\n}));\n\njest.mock('../../hooks/useAccessibilityProps', () => ({\n  useAccessibilityProps: () => ({\n    accessible: true,\n    accessibilityRole: 'text',\n  }),\n}));\n\njest.mock('../AutoRoleView', () => ({\n  AutoRoleView: ({ children }: { children: React.ReactNode }) => children,\n}));\n\ndescribe('Text', () => {\n  it('should render text with default props', () => {\n    const { getByText } = render(<Text>Hello World</Text>);\n    expect(getByText('Hello World')).toBeDefined();\n  });\n\n  it('should render with different variants', () => {\n    const { getByText } = render(\n      <Text variant=\"h1\">Heading</Text>\n    );\n    expect(getByText('Heading')).toBeDefined();\n  });\n\n  it('should render with different weights', () => {\n    const { getByText } = render(\n      <Text weight=\"bold\">Bold Text</Text>\n    );\n    expect(getByText('Bold Text')).toBeDefined();\n  });\n\n  it('should render with different colors', () => {\n    const { getByText } = render(\n      <Text color=\"error\">Error Text</Text>\n    );\n    expect(getByText('Error Text')).toBeDefined();\n  });\n\n  it('should render with truncation', () => {\n    const { getByText } = render(\n      <Text truncate>Long text that should be truncated</Text>\n    );\n    expect(getByText('Long text that should be truncated')).toBeDefined();\n  });\n\n  it('should render with custom style', () => {\n    const { getByText } = render(\n      <Text style={{ marginTop: 10 }}>Custom Style</Text>\n    );\n    expect(getByText('Custom Style')).toBeDefined();\n  });\n});"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/components/text/Heading.test.tsx",
      "description": "Create tests for Heading component",
      "content": "import React from 'react';\nimport { render } from '@testing-library/react-native';\nimport { Heading } from './Heading';\n\n// Mock theme and accessibility hooks\njest.mock('../../theme', () => ({\n  useTheme: () => ({\n    theme: {\n      typography: {\n        fontFamily: {\n          normal: 'System',\n          medium: 'System',\n          semibold: 'System',\n          bold: 'System',\n        },\n        fontSize: {\n          xs: 12,\n          sm: 14,\n          base: 16,\n          lg: 18,\n          xl: 20,\n          '2xl': 24,\n          '3xl': 30,\n          '4xl': 36,\n        },\n        fontWeight: {\n          normal: '400',\n          medium: '500',\n          semibold: '600',\n          bold: '700',\n        },\n        lineHeight: {\n          tight: 1.2,\n          normal: 1.5,\n          relaxed: 1.75,\n        },\n      },\n      colors: {\n        text: '#000000',\n        textSecondary: '#6C6C70',\n        textTertiary: '#8E8E93',\n        error: '#FF3B30',\n        success: '#34C759',\n        warning: '#FF9500',\n        info: '#007AFF',\n      },\n    },\n  }),\n}));\n\njest.mock('../../hooks/useAccessibilityProps', () => ({\n  useAccessibilityProps: () => ({\n    accessible: true,\n    accessibilityRole: 'text',\n  }),\n}));\n\njest.mock('../AutoRoleView', () => ({\n  AutoRoleView: ({ children }: { children: React.ReactNode }) => children,\n}));\n\ndescribe('Heading', () => {\n  it('should render heading with level 1', () => {\n    const { getByText } = render(\n      <Heading level={1}>Main Heading</Heading>\n    );\n    expect(getByText('Main Heading')).toBeDefined();\n  });\n\n  it('should render heading with level 2', () => {\n    const { getByText } = render(\n      <Heading level={2}>Sub Heading</Heading>\n    );\n    expect(getByText('Sub Heading')).toBeDefined();\n  });\n\n  it('should render heading with custom weight', () => {\n    const { getByText } = render(\n      <Heading level={1} weight=\"medium\">Custom Weight</Heading>\n    );\n    expect(getByText('Custom Weight')).toBeDefined();\n  });\n\n  it('should render heading with custom color', () => {\n    const { getByText } = render(\n      <Heading level={1} color=\"secondary\">Custom Color</Heading>\n    );\n    expect(getByText('Custom Color')).toBeDefined();\n  });\n});"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/components/text/Link.test.tsx",
      "description": "Create tests for Link component",
      "content": "import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { Link } from './Link';\n\n// Mock theme and accessibility hooks\njest.mock('../../theme', () => ({\n  useTheme: () => ({\n    theme: {\n      typography: {\n        fontFamily: {\n          normal: 'System',\n          medium: 'System',\n          semibold: 'System',\n          bold: 'System',\n        },\n        fontSize: {\n          xs: 12,\n          sm: 14,\n          base: 16,\n          lg: 18,\n          xl: 20,\n          '2xl': 24,\n          '3xl': 30,\n          '4xl': 36,\n        },\n        fontWeight: {\n          normal: '400',\n          medium: '500',\n          semibold: '600',\n          bold: '700',\n        },\n        lineHeight: {\n          tight: 1.2,\n          normal: 1.5,\n          relaxed: 1.75,\n        },\n      },\n      colors: {\n        text: '#000000',\n        textSecondary: '#6C6C70',\n        textTertiary: '#8E8E93',\n        primary: '#007AFF',\n        error: '#FF3B30',\n        success: '#34C759',\n        warning: '#FF9500',\n        info: '#007AFF',\n      },\n    },\n  }),\n}));\n\njest.mock('../../hooks/useAccessibilityProps', () => ({\n  useAccessibilityProps: () => ({\n    accessible: true,\n    accessibilityRole: 'link',\n  }),\n}));\n\ndescribe('Link', () => {\n  it('should render link text', () => {\n    const onPress = jest.fn();\n    const { getByText } = render(\n      <Link onPress={onPress}>Click me</Link>\n    );\n    expect(getByText('Click me')).toBeDefined();\n  });\n\n  it('should call onPress when pressed', () => {\n    const onPress = jest.fn();\n    const { getByText } = render(\n      <Link onPress={onPress}>Click me</Link>\n    );\n    \n    fireEvent.press(getByText('Click me'));\n    expect(onPress).toHaveBeenCalledTimes(1);\n  });\n\n  it('should render disabled link', () => {\n    const onPress = jest.fn();\n    const { getByText } = render(\n      <Link onPress={onPress} disabled>Disabled Link</Link>\n    );\n    expect(getByText('Disabled Link')).toBeDefined();\n  });\n\n  it('should render link without underline', () => {\n    const onPress = jest.fn();\n    const { getByText } = render(\n      <Link onPress={onPress} underline={false}>No Underline</Link>\n    );\n    expect(getByText('No Underline')).toBeDefined();\n  });\n});"
    }
  ]
} 