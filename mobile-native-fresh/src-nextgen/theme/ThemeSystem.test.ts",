import { ThemeSystem } from './ThemeSystem';
import { resetAllMocks } from '@/__tests__/helpers/test-utils';

// Mock AsyncStorage
jest.mock('@react-native-async-storage/async-storage', () => ({
  setItem: jest.fn(),
  getItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn(),
}));

describe('ThemeSystem', () => {
  let themeSystem: ThemeSystem;
  let mockAsyncStorage: any;

  beforeEach(() => {
    resetAllMocks();
    themeSystem = ThemeSystem.getInstance();
    mockAsyncStorage = require('@react-native-async-storage/async-storage');
    mockAsyncStorage.setItem.mockResolvedValue();
    mockAsyncStorage.getItem.mockResolvedValue(null);
  });

  afterEach(() => {
    themeSystem.destroy();
  });

  it('should be a singleton', () => {
    const instance1 = ThemeSystem.getInstance();
    const instance2 = ThemeSystem.getInstance();
    expect(instance1).toBe(instance2);
  });

  it('should initialize successfully', async () => {
    const result = await themeSystem.initialize();
    expect(result.isValid).toBe(true);
    expect(result.errors).toHaveLength(0);
  });

  it('should switch theme successfully', async () => {
    const result = await themeSystem.switchTheme('dark');
    expect(result.isValid).toBe(true);
    expect(themeSystem.getCurrentTheme()).toBe('dark');
  });

  it('should handle theme validation failure', async () => {
    // Mock an invalid theme
    const result = await themeSystem.switchTheme('invalid-theme' as any);
    expect(result.isValid).toBe(false);
    expect(result.errors.length).toBeGreaterThan(0);
  });

  it('should handle theme not found', async () => {
    const result = await themeSystem.switchTheme('non-existent-theme' as any);
    expect(result.isValid).toBe(false);
    expect(result.errors.some(error => error.includes('not found'))).toBe(true);
  });

  it('should calculate contrast ratio correctly', () => {
    const ratio = themeSystem.calculateContrastRatio('#000000', '#FFFFFF');
    expect(ratio).toBe(21); // Maximum contrast ratio
  });

  it('should validate color accessibility', () => {
    const result = themeSystem.validateColorAccessibility('#000000', '#FFFFFF');
    expect(result.isValid).toBe(true);
    expect(result.contrastRatio).toBe(21);
  });

  it('should handle theme switch timeout', async () => {
    // Mock a slow theme switch
    jest.spyOn(themeSystem, 'switchTheme').mockImplementationOnce(() =>
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout')), 100)
      )
    );

    await expect(themeSystem.switchTheme('dark')).rejects.toThrow('Timeout');
  });

  it('should notify listeners on theme change', async () => {
    const listener = jest.fn();
    themeSystem.addListener('themeChanged', listener);

    await themeSystem.switchTheme('dark');
    expect(listener).toHaveBeenCalledWith('dark');
  });

  it('should handle theme system destruction', () => {
    expect(() => themeSystem.destroy()).not.toThrow();
  });
}); 