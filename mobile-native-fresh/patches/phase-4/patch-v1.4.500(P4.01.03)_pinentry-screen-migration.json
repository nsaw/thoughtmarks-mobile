{
  "patch": {
    "id": "patch-v1.4.500(P4.01.03)_pinentry-screen-migration",
    "version": "v1.4.500(P4.01.03)",
    "phase": 4,
    "step": 1,
    "attempt": 3,
    "description": "PINEntryScreen Migration - Secure PIN entry with biometric authentication and enterprise security",
    "priority": "critical",
    "risk": "high",
    "estimatedTime": "6 hours",
    "dependencies": [
      "patch-v1.4.500(P4.01.01)_signin-screen-migration",
      "patch-v1.4.500(P4.01.02)_signup-screen-migration",
      "patch-v1.4.400(P3.01.08)_state-management-implementation",
      "patch-v1.4.400(P3.01.07)_navigation-system-implementation",
      "patch-v1.4.400(P3.01.05)_theme-system-implementation",
      "patch-v1.4.410(P3.02.01)_core-types-definition",
      "patch-v1.4.410(P3.02.02)_core-hooks-implementation"
    ],
    "validationGates": [
      "TypeScript compilation",
      "PIN validation testing",
      "Biometric authentication testing",
      "Security testing",
      "Accessibility compliance",
      "Visual regression test",
      "Performance impact measurement",
      "Security validation"
    ],
    "successCriteria": [
      "PINEntryScreen fully functional with biometric support",
      "PIN validation and security implemented",
      "Biometric authentication working",
      "Security timeout implemented",
      "Failed attempt handling",
      "Accessibility compliance achieved",
      "No visual regressions",
      "Performance impact < 5%",
      "Security best practices implemented"
    ],
    "rollbackPlan": [
      "Git tag: backup-v1.4.500(P4.01.03)_pinentry-screen-migration",
      "Restore from src-reference/screens/PINEntryScreen.tsx",
      "Revert biometric authentication changes",
      "Test legacy functionality"
    ],
    "gitTag": "v1.4.500(P4.01.03)_pinentry-screen-migration",
    "summaryFile": "summary-v1.4.500(P4.01.03)_pinentry-screen-migration.md",
    "branch": "phase-4-pinentry-migration",
    "preMutationBuild": [
      "npm run lint:guard",
      "npx tsc --noEmit",
      "npm run test:unit --watchAll=false",
      "npm run test:auth --watchAll=false",
      "npm run test:security --watchAll=false"
    ],
    "postMutationBuild": [
      "npm run lint:guard",
      "npx tsc --noEmit",
      "npm run test:unit --watchAll=false",
      "npm run test:auth --watchAll=false",
      "npm run test:integration --watchAll=false",
      "npm run test:accessibility --watchAll=false",
      "npm run test:security --watchAll=false"
    ],
    "mutations": [
      {
        "type": "file_create",
        "target": "src-nextgen/screens/auth/PINEntryScreen.tsx",
        "description": "Create enterprise-grade PINEntryScreen with biometric authentication and comprehensive security",
        "content": "import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  ActivityIndicator,\n  Vibration,\n} from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { useAuth } from '../hooks/useAuth';\nimport { useTheme } from '../hooks/useTheme';\nimport { useValidation } from '../hooks/useValidation';\nimport { useAccessibility } from '../hooks/useAccessibility';\nimport { useBiometrics } from '../hooks/useBiometrics';\nimport { useSecurity } from '../hooks/useSecurity';\nimport { Button } from '../components/Button';\nimport { Text as CustomText } from '../components/Text';\nimport { AutoRoleView } from '../components/AutoRoleView';\nimport { PINInput } from '../components/PINInput';\nimport { BiometricButton } from '../components/BiometricButton';\nimport { AuthError } from '../types/auth';\nimport { PINValidationSchema } from '../types/forms';\nimport { authService } from '../services/authService';\nimport { analyticsService } from '../services/analyticsService';\nimport { errorService } from '../services/errorService';\nimport { securityService } from '../services/securityService';\nimport { styles } from './PINEntryScreen.styles';\n\nexport const PINEntryScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { verifyPIN, isLoading: authLoading, error: authError } = useAuth();\n  const { theme, colors } = useTheme();\n  const { validateForm, validationErrors, clearValidationErrors } = useValidation();\n  const { isScreenReaderEnabled } = useAccessibility();\n  const { \n    isBiometricAvailable, \n    biometricType, \n    authenticateWithBiometrics,\n    isBiometricSupported \n  } = useBiometrics();\n  const { \n    isLockedOut, \n    lockoutEndTime, \n    failedAttempts, \n    maxAttempts,\n    lockoutDuration,\n    recordFailedAttempt,\n    resetFailedAttempts \n  } = useSecurity();\n\n  const [pin, setPin] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showPIN, setShowPIN] = useState(false);\n  const [isBiometricLoading, setIsBiometricLoading] = useState(false);\n  const [securityTimeout, setSecurityTimeout] = useState<number | null>(null);\n\n  const pinInputRef = useRef<TextInput>(null);\n\n  // Security constants\n  const PIN_LENGTH = 6;\n  const SECURITY_TIMEOUT = 5 * 60 * 1000; // 5 minutes\n  const MAX_PIN_ATTEMPTS = 3;\n\n  // Handle auth errors\n  useEffect(() => {\n    if (authError) {\n      handleAuthError(authError);\n    }\n  }, [authError]);\n\n  // Handle security timeout\n  useEffect(() => {\n    if (securityTimeout) {\n      const timer = setTimeout(() => {\n        setSecurityTimeout(null);\n        setPin('');\n        Alert.alert(\n          'Security Timeout',\n          'Session expired for security. Please enter your PIN again.'\n        );\n      }, SECURITY_TIMEOUT);\n\n      return () => clearTimeout(timer);\n    }\n  }, [securityTimeout]);\n\n  // Auto-focus PIN input when screen loads\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      pinInputRef.current?.focus();\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleAuthError = useCallback((error: AuthError) => {\n    recordFailedAttempt();\n    \n    if (failedAttempts >= MAX_PIN_ATTEMPTS) {\n      Alert.alert(\n        'Account Locked',\n        'Too many failed PIN attempts. Please try again later or use biometric authentication.'\n      );\n    } else {\n      const remainingAttempts = MAX_PIN_ATTEMPTS - failedAttempts;\n      Alert.alert(\n        'Invalid PIN',\n        `Incorrect PIN. ${remainingAttempts} attempts remaining.`\n      );\n    }\n\n    // Haptic feedback for error\n    Vibration.vibrate(100);\n\n    // Analytics tracking\n    analyticsService.track('pin_verification_failed', {\n      error: error.code,\n      attemptCount: failedAttempts + 1,\n      biometricAvailable: isBiometricAvailable\n    });\n\n    // Error reporting\n    errorService.reportError('pin_verification_error', {\n      error,\n      attemptCount: failedAttempts + 1,\n      timestamp: new Date().toISOString()\n    });\n  }, [authError, failedAttempts, recordFailedAttempt, isBiometricAvailable]);\n\n  const handlePINChange = useCallback((value: string) => {\n    // Only allow numeric input\n    const numericValue = value.replace(/[^0-9]/g, '');\n    \n    if (numericValue.length <= PIN_LENGTH) {\n      setPin(numericValue);\n      \n      // Clear validation errors\n      if (validationErrors.pin) {\n        clearValidationErrors(['pin']);\n      }\n\n      // Auto-submit when PIN is complete\n      if (numericValue.length === PIN_LENGTH) {\n        handlePINSubmit(numericValue);\n      }\n    }\n  }, [validationErrors.pin, clearValidationErrors]);\n\n  const validatePIN = useCallback(async (pinValue: string): Promise<boolean> => {\n    const isValid = await validateForm({ pin: pinValue }, PINValidationSchema);\n    \n    if (!isValid) {\n      analyticsService.track('pin_validation_failed', {\n        errors: Object.keys(validationErrors),\n        pinLength: pinValue.length\n      });\n    }\n\n    return isValid;\n  }, [validateForm, validationErrors]);\n\n  const handlePINSubmit = useCallback(async (pinValue?: string) => {\n    const pinToVerify = pinValue || pin;\n    \n    if (isSubmitting || authLoading || isLockedOut) return;\n    if (pinToVerify.length !== PIN_LENGTH) return;\n\n    setIsSubmitting(true);\n\n    try {\n      // Validate PIN format\n      const isValid = await validatePIN(pinToVerify);\n      if (!isValid) {\n        setIsSubmitting(false);\n        return;\n      }\n\n      // Analytics tracking\n      analyticsService.track('pin_verification_attempt', {\n        pinLength: pinToVerify.length,\n        attemptCount: failedAttempts + 1\n      });\n\n      // Attempt PIN verification\n      await verifyPIN(pinToVerify);\n\n      // Reset failed attempts on success\n      resetFailedAttempts();\n\n      // Success tracking\n      analyticsService.track('pin_verification_success', {\n        attemptCount: failedAttempts + 1\n      });\n\n      // Navigate to main app\n      navigation.navigate('Main');\n\n    } catch (error) {\n      console.error('PIN verification error:', error);\n      \n      // Error reporting\n      errorService.reportError('pin_verification_unexpected_error', {\n        error,\n        pinLength: pinToVerify.length,\n        timestamp: new Date().toISOString()\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [\n    pin,\n    isSubmitting,\n    authLoading,\n    isLockedOut,\n    validatePIN,\n    verifyPIN,\n    failedAttempts,\n    resetFailedAttempts,\n    navigation\n  ]);\n\n  const handleBiometricAuth = useCallback(async () => {\n    if (isBiometricLoading || !isBiometricAvailable) return;\n\n    setIsBiometricLoading(true);\n\n    try {\n      // Analytics tracking\n      analyticsService.track('biometric_auth_attempt', {\n        biometricType,\n        attemptCount: failedAttempts + 1\n      });\n\n      // Attempt biometric authentication\n      const isAuthenticated = await authenticateWithBiometrics();\n\n      if (isAuthenticated) {\n        // Reset failed attempts on success\n        resetFailedAttempts();\n\n        // Success tracking\n        analyticsService.track('biometric_auth_success', {\n          biometricType,\n          attemptCount: failedAttempts + 1\n        });\n\n        // Navigate to main app\n        navigation.navigate('Main');\n      } else {\n        Alert.alert(\n          'Authentication Failed',\n          'Biometric authentication failed. Please try again or use your PIN.'\n        );\n      }\n\n    } catch (error) {\n      console.error('Biometric authentication error:', error);\n      \n      Alert.alert(\n        'Authentication Error',\n        'Biometric authentication encountered an error. Please use your PIN.'\n      );\n\n      // Error reporting\n      errorService.reportError('biometric_auth_error', {\n        error,\n        biometricType,\n        timestamp: new Date().toISOString()\n      });\n    } finally {\n      setIsBiometricLoading(false);\n    }\n  }, [\n    isBiometricLoading,\n    isBiometricAvailable,\n    biometricType,\n    authenticateWithBiometrics,\n    failedAttempts,\n    resetFailedAttempts,\n    navigation\n  ]);\n\n  const handleForgotPIN = useCallback(() => {\n    analyticsService.track('forgot_pin_clicked');\n    navigation.navigate('PasswordReset');\n  }, [navigation]);\n\n  const handleSignOut = useCallback(() => {\n    analyticsService.track('sign_out_from_pin');\n    navigation.navigate('SignIn');\n  }, [navigation]);\n\n  const getBiometricIcon = () => {\n    switch (biometricType) {\n      case 'TouchID':\n        return '👆';\n      case 'FaceID':\n        return '👤';\n      case 'Fingerprint':\n        return '👆';\n      default:\n        return '🔐';\n    }\n  };\n\n  const getBiometricLabel = () => {\n    switch (biometricType) {\n      case 'TouchID':\n        return 'Use Touch ID';\n      case 'FaceID':\n        return 'Use Face ID';\n      case 'Fingerprint':\n        return 'Use Fingerprint';\n      default:\n        return 'Use Biometrics';\n    }\n  };\n\n  const isLoading = isSubmitting || authLoading;\n  const isPINComplete = pin.length === PIN_LENGTH;\n\n  return (\n    <KeyboardAvoidingView\n      style={[styles.container, { backgroundColor: colors.background }]}\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n    >\n      <ScrollView\n        contentContainerStyle={styles.scrollContent}\n        keyboardShouldPersistTaps=\"handled\"\n        showsVerticalScrollIndicator={false}\n      >\n        <AutoRoleView\n          layoutRole=\"auth-container\"\n          style={styles.content}\n        >\n          {/* Header */}\n          <AutoRoleView layoutRole=\"auth-header\" style={styles.header}>\n            <CustomText\n              variant=\"h1\"\n              style={[styles.title, { color: colors.text }]}\n              accessibilityRole=\"header\"\n            >\n              Enter PIN\n            </CustomText>\n            <CustomText\n              variant=\"body\"\n              style={[styles.subtitle, { color: colors.textSecondary }]}\n            >\n              Enter your 6-digit PIN to continue\n            </CustomText>\n          </AutoRoleView>\n\n          {/* PIN Input */}\n          <AutoRoleView layoutRole=\"auth-form\" style={styles.form}>\n            <AutoRoleView layoutRole=\"form-field\" style={styles.pinContainer}>\n              <PINInput\n                ref={pinInputRef}\n                value={pin}\n                onChangeText={handlePINChange}\n                length={PIN_LENGTH}\n                showValue={showPIN}\n                onToggleVisibility={() => setShowPIN(!showPIN)}\n                disabled={isLoading || isLockedOut}\n                error={!!validationErrors.pin}\n                accessibilityLabel=\"PIN input field\"\n                accessibilityHint=\"Enter your 6-digit PIN\"\n                accessibilityRole=\"text\"\n                accessibilityState={{ \n                  invalid: !!validationErrors.pin,\n                  disabled: isLoading || isLockedOut\n                }}\n              />\n              {validationErrors.pin && (\n                <CustomText\n                  variant=\"caption\"\n                  style={[styles.errorText, { color: colors.error }]}\n                  accessibilityRole=\"text\"\n                >\n                  {validationErrors.pin}\n                </CustomText>\n              )}\n            </AutoRoleView>\n\n            {/* Biometric Authentication */}\n            {isBiometricAvailable && !isLockedOut && (\n              <AutoRoleView layoutRole=\"auth-option\" style={styles.biometricContainer}>\n                <BiometricButton\n                  icon={getBiometricIcon()}\n                  label={getBiometricLabel()}\n                  onPress={handleBiometricAuth}\n                  loading={isBiometricLoading}\n                  disabled={isLoading}\n                  style={styles.biometricButton}\n                  accessibilityLabel={`${getBiometricLabel()} button`}\n                  accessibilityHint=\"Use biometric authentication instead of PIN\"\n                  accessibilityRole=\"button\"\n                />\n              </AutoRoleView>\n            )}\n\n            {/* Security Status */}\n            {isLockedOut && (\n              <AutoRoleView layoutRole=\"error-message\" style={styles.lockoutContainer}>\n                <CustomText\n                  variant=\"body\"\n                  style={[styles.lockoutText, { color: colors.error }]}\n                  accessibilityRole=\"text\"\n                >\n                  Account temporarily locked. Please try again in {Math.ceil((lockoutEndTime! - Date.now()) / 1000 / 60)} minutes.\n                </CustomText>\n              </AutoRoleView>\n            )}\n\n            {failedAttempts > 0 && !isLockedOut && (\n              <AutoRoleView layoutRole=\"warning-message\" style={styles.warningContainer}>\n                <CustomText\n                  variant=\"body\"\n                  style={[styles.warningText, { color: colors.warning }]}\n                  accessibilityRole=\"text\"\n                >\n                  {MAX_PIN_ATTEMPTS - failedAttempts} attempts remaining\n                </CustomText>\n              </AutoRoleView>\n            )}\n\n            {/* Action Buttons */}\n            <AutoRoleView layoutRole=\"auth-actions\" style={styles.actionsContainer}>\n              <TouchableOpacity\n                style={styles.forgotPINButton}\n                onPress={handleForgotPIN}\n                accessibilityLabel=\"Forgot PIN link\"\n                accessibilityRole=\"link\"\n                disabled={isLoading || isLockedOut}\n              >\n                <CustomText\n                  variant=\"body\"\n                  style={[styles.forgotPINText, { color: colors.primary }]}\n                >\n                  Forgot PIN?\n                </CustomText>\n              </TouchableOpacity>\n\n              <TouchableOpacity\n                style={styles.signOutButton}\n                onPress={handleSignOut}\n                accessibilityLabel=\"Sign out button\"\n                accessibilityRole=\"button\"\n                disabled={isLoading || isLockedOut}\n              >\n                <CustomText\n                  variant=\"body\"\n                  style={[styles.signOutText, { color: colors.textSecondary }]}\n                >\n                  Sign Out\n                </CustomText>\n              </TouchableOpacity>\n            </AutoRoleView>\n          </AutoRoleView>\n\n          {/* Security Notice */}\n          <AutoRoleView layoutRole=\"security-notice\" style={styles.securityNotice}>\n            <CustomText\n              variant=\"caption\"\n              style={[styles.securityText, { color: colors.textSecondary }]}\n              accessibilityRole=\"text\"\n            >\n              Your PIN is encrypted and stored securely on your device.\n            </CustomText>\n          </AutoRoleView>\n        </AutoRoleView>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n};"
      },
      {
        "type": "file_create",
        "target": "src-nextgen/screens/auth/PINEntryScreen.styles.ts",
        "description": "Create comprehensive styles for PINEntryScreen with theme support",
        "content": "import { StyleSheet } from 'react-native';\nimport { ThemeColors } from '../types/theme';\n\nexport const createStyles = (colors: ThemeColors) => StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scrollContent: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 24,\n    paddingVertical: 32,\n  },\n  content: {\n    width: '100%',\n    maxWidth: 400,\n    alignSelf: 'center',\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 48,\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    textAlign: 'center',\n    opacity: 0.8,\n  },\n  form: {\n    marginBottom: 32,\n  },\n  pinContainer: {\n    marginBottom: 32,\n    alignItems: 'center',\n  },\n  errorText: {\n    fontSize: 12,\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  biometricContainer: {\n    marginBottom: 24,\n    alignItems: 'center',\n  },\n  biometricButton: {\n    width: '100%',\n    height: 48,\n    borderRadius: 8,\n  },\n  lockoutContainer: {\n    marginBottom: 24,\n    padding: 12,\n    borderRadius: 8,\n    backgroundColor: colors.error + '10',\n    borderWidth: 1,\n    borderColor: colors.error + '30',\n  },\n  lockoutText: {\n    fontSize: 14,\n    textAlign: 'center',\n  },\n  warningContainer: {\n    marginBottom: 24,\n    padding: 12,\n    borderRadius: 8,\n    backgroundColor: colors.warning + '10',\n    borderWidth: 1,\n    borderColor: colors.warning + '30',\n  },\n  warningText: {\n    fontSize: 14,\n    textAlign: 'center',\n  },\n  actionsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  forgotPINButton: {\n    flex: 1,\n    alignItems: 'flex-start',\n  },\n  forgotPINText: {\n    fontSize: 14,\n    textDecorationLine: 'underline',\n  },\n  signOutButton: {\n    flex: 1,\n    alignItems: 'flex-end',\n  },\n  signOutText: {\n    fontSize: 14,\n    textDecorationLine: 'underline',\n  },\n  securityNotice: {\n    alignItems: 'center',\n  },\n  securityText: {\n    fontSize: 12,\n    textAlign: 'center',\n    opacity: 0.7,\n  },\n});\n\nexport const styles = createStyles({\n  background: '#FFFFFF',\n  surface: '#F8F9FA',\n  text: '#1A1A1A',\n  textSecondary: '#6C757D',\n  primary: '#007AFF',\n  error: '#DC3545',\n  warning: '#FFC107',\n  border: '#DEE2E6',\n} as ThemeColors);"
      },
      {
        "type": "file_update",
        "target": "src-nextgen/screens/auth/index.ts",
        "description": "Export PINEntryScreen from auth screens index",
        "content": "export { SignInScreen } from './SignInScreen';\nexport { SignUpScreen } from './SignUpScreen';\nexport { PINEntryScreen } from './PINEntryScreen';\n\nexport * from './SignInScreen';\nexport * from './SignUpScreen';\nexport * from './PINEntryScreen';\n"
      }
    ]
  }
} 