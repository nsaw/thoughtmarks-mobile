{
  "patchId": "patch-v1.4.400(P3.01.05)_theme-system-implementation",
  "version": "v1.4.400",
  "phase": 3,
  "step": "3.01.05",
  "description": "Theme System Implementation",
  "priority": "high",
  "risk": "medium",
  "estimatedTime": "2-3 hours",
  "dependencies": [
    "patch-v1.4.400(P3.01.01)_autoroleview-enhancement",
    "patch-v1.4.400(P3.01.02)_performance-monitor-fix",
    "patch-v1.4.400(P3.01.03)_validation-system-fix",
    "patch-v1.4.400(P3.01.04)_environment-system-fix"
  ],
  "validationGates": [
    "typescript",
    "eslint",
    "visual-regression",
    "performance",
    "accessibility",
    "dual-mount-toggle"
  ],
  "successCriteria": [
    "Theme system properly typed and accessible",
    "All theme tokens available in nextgen",
    "Dark/light mode switching works",
    "No TypeScript errors in theme files",
    "Visual regression tests pass",
    "Performance impact < 5ms"
  ],
  "rollbackPlan": "Revert to legacy theme system",
  "gitTag": "v1.4.400-P3.01.05",
  "summaryFile": "mobile-native-fresh/tasks/summaries/patch-v1.4.400(P3.01.05)_theme-system-implementation.md",
  "branch": "phase-3-theme-system",
  "preMutationBuild": "npm run lint:guard && npx tsc --noEmit",
  "postMutationBuild": "npm run lint:guard && npx tsc --noEmit && npm run test:theme",
  "mutations": [
    {
      "file": "mobile-native-fresh/src-nextgen/theme/ThemeProvider.tsx",
      "description": "Create comprehensive theme provider with proper TypeScript types",
      "content": "import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useColorScheme } from 'react-native';\nimport { lightTheme, darkTheme, Theme, ThemeContextType } from './types';\nimport { useAccessibility } from '../hooks/useAccessibility';\n\nexport const ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n  initialTheme?: 'light' | 'dark' | 'system';\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ \n  children, \n  initialTheme = 'system' \n}) => {\n  const systemColorScheme = useColorScheme();\n  const { isHighContrastEnabled } = useAccessibility();\n  \n  const [themeMode, setThemeMode] = useState<'light' | 'dark' | 'system'>(initialTheme);\n  const [currentTheme, setCurrentTheme] = useState<Theme>(lightTheme);\n\n  useEffect(() => {\n    const getEffectiveTheme = (): Theme => {\n      let baseTheme: Theme;\n      \n      if (themeMode === 'system') {\n        baseTheme = systemColorScheme === 'dark' ? darkTheme : lightTheme;\n      } else {\n        baseTheme = themeMode === 'dark' ? darkTheme : lightTheme;\n      }\n\n      // Apply high contrast adjustments if enabled\n      if (isHighContrastEnabled) {\n        return {\n          ...baseTheme,\n          colors: {\n            ...baseTheme.colors,\n            primary: baseTheme.colors.primaryHighContrast || baseTheme.colors.primary,\n            secondary: baseTheme.colors.secondaryHighContrast || baseTheme.colors.secondary,\n            text: baseTheme.colors.textHighContrast || baseTheme.colors.text,\n            background: baseTheme.colors.backgroundHighContrast || baseTheme.colors.background,\n          }\n        };\n      }\n\n      return baseTheme;\n    };\n\n    setCurrentTheme(getEffectiveTheme());\n  }, [themeMode, systemColorScheme, isHighContrastEnabled]);\n\n  const toggleTheme = () => {\n    setThemeMode(prev => {\n      if (prev === 'light') return 'dark';\n      if (prev === 'dark') return 'system';\n      return 'light';\n    });\n  };\n\n  const setTheme = (mode: 'light' | 'dark' | 'system') => {\n    setThemeMode(mode);\n  };\n\n  const value: ThemeContextType = {\n    theme: currentTheme,\n    themeMode,\n    toggleTheme,\n    setTheme,\n    isDark: currentTheme === darkTheme,\n    isLight: currentTheme === lightTheme,\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/theme/types.ts",
      "description": "Define comprehensive theme types with accessibility support",
      "content": "export interface ColorPalette {\n  primary: string;\n  primaryHighContrast?: string;\n  secondary: string;\n  secondaryHighContrast?: string;\n  accent: string;\n  success: string;\n  warning: string;\n  error: string;\n  info: string;\n  text: string;\n  textHighContrast?: string;\n  textSecondary: string;\n  textTertiary: string;\n  background: string;\n  backgroundHighContrast?: string;\n  backgroundSecondary: string;\n  backgroundTertiary: string;\n  border: string;\n  borderSecondary: string;\n  shadow: string;\n  overlay: string;\n}\n\nexport interface Typography {\n  fontFamily: {\n    regular: string;\n    medium: string;\n    semibold: string;\n    bold: string;\n    monospace: string;\n  };\n  fontSize: {\n    xs: number;\n    sm: number;\n    base: number;\n    lg: number;\n    xl: number;\n    '2xl': number;\n    '3xl': number;\n    '4xl': number;\n  };\n  lineHeight: {\n    tight: number;\n    normal: number;\n    relaxed: number;\n  };\n  fontWeight: {\n    normal: string;\n    medium: string;\n    semibold: string;\n    bold: string;\n  };\n}\n\nexport interface Spacing {\n  xs: number;\n  sm: number;\n  md: number;\n  lg: number;\n  xl: number;\n  '2xl': number;\n  '3xl': number;\n  '4xl': number;\n}\n\nexport interface BorderRadius {\n  none: number;\n  sm: number;\n  md: number;\n  lg: number;\n  xl: number;\n  full: number;\n}\n\nexport interface Shadows {\n  sm: {\n    shadowColor: string;\n    shadowOffset: { width: number; height: number };\n    shadowOpacity: number;\n    shadowRadius: number;\n    elevation: number;\n  };\n  md: {\n    shadowColor: string;\n    shadowOffset: { width: number; height: number };\n    shadowOpacity: number;\n    shadowRadius: number;\n    elevation: number;\n  };\n  lg: {\n    shadowColor: string;\n    shadowOffset: { width: number; height: number };\n    shadowOpacity: number;\n    shadowRadius: number;\n    elevation: number;\n  };\n}\n\nexport interface Theme {\n  colors: ColorPalette;\n  typography: Typography;\n  spacing: Spacing;\n  borderRadius: BorderRadius;\n  shadows: Shadows;\n  name: string;\n}\n\nexport interface ThemeContextType {\n  theme: Theme;\n  themeMode: 'light' | 'dark' | 'system';\n  toggleTheme: () => void;\n  setTheme: (mode: 'light' | 'dark' | 'system') => void;\n  isDark: boolean;\n  isLight: boolean;\n}"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/theme/themes.ts",
      "description": "Define light and dark theme configurations",
      "content": "import { Theme } from './types';\n\nexport const lightTheme: Theme = {\n  name: 'light',\n  colors: {\n    primary: '#007AFF',\n    primaryHighContrast: '#0056CC',\n    secondary: '#5856D6',\n    secondaryHighContrast: '#3A3A8C',\n    accent: '#FF9500',\n    success: '#34C759',\n    warning: '#FF9500',\n    error: '#FF3B30',\n    info: '#007AFF',\n    text: '#000000',\n    textHighContrast: '#000000',\n    textSecondary: '#6C6C70',\n    textTertiary: '#8E8E93',\n    background: '#FFFFFF',\n    backgroundHighContrast: '#FFFFFF',\n    backgroundSecondary: '#F2F2F7',\n    backgroundTertiary: '#E5E5EA',\n    border: '#C6C6C8',\n    borderSecondary: '#E5E5EA',\n    shadow: 'rgba(0, 0, 0, 0.1)',\n    overlay: 'rgba(0, 0, 0, 0.5)',\n  },\n  typography: {\n    fontFamily: {\n      regular: 'System',\n      medium: 'System',\n      semibold: 'System',\n      bold: 'System',\n      monospace: 'SF Mono',\n    },\n    fontSize: {\n      xs: 12,\n      sm: 14,\n      base: 16,\n      lg: 18,\n      xl: 20,\n      '2xl': 24,\n      '3xl': 30,\n      '4xl': 36,\n    },\n    lineHeight: {\n      tight: 1.2,\n      normal: 1.5,\n      relaxed: 1.75,\n    },\n    fontWeight: {\n      normal: '400',\n      medium: '500',\n      semibold: '600',\n      bold: '700',\n    },\n  },\n  spacing: {\n    xs: 4,\n    sm: 8,\n    md: 16,\n    lg: 24,\n    xl: 32,\n    '2xl': 48,\n    '3xl': 64,\n    '4xl': 96,\n  },\n  borderRadius: {\n    none: 0,\n    sm: 4,\n    md: 8,\n    lg: 12,\n    xl: 16,\n    full: 9999,\n  },\n  shadows: {\n    sm: {\n      shadowColor: 'rgba(0, 0, 0, 0.1)',\n      shadowOffset: { width: 0, height: 1 },\n      shadowOpacity: 1,\n      shadowRadius: 2,\n      elevation: 2,\n    },\n    md: {\n      shadowColor: 'rgba(0, 0, 0, 0.1)',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 1,\n      shadowRadius: 4,\n      elevation: 4,\n    },\n    lg: {\n      shadowColor: 'rgba(0, 0, 0, 0.1)',\n      shadowOffset: { width: 0, height: 4 },\n      shadowOpacity: 1,\n      shadowRadius: 8,\n      elevation: 8,\n    },\n  },\n};\n\nexport const darkTheme: Theme = {\n  name: 'dark',\n  colors: {\n    primary: '#0A84FF',\n    primaryHighContrast: '#5E9EFF',\n    secondary: '#5E5CE6',\n    secondaryHighContrast: '#7B7BFF',\n    accent: '#FF9F0A',\n    success: '#30D158',\n    warning: '#FF9F0A',\n    error: '#FF453A',\n    info: '#0A84FF',\n    text: '#FFFFFF',\n    textHighContrast: '#FFFFFF',\n    textSecondary: '#EBEBF5',\n    textTertiary: '#EBEBF599',\n    background: '#000000',\n    backgroundHighContrast: '#000000',\n    backgroundSecondary: '#1C1C1E',\n    backgroundTertiary: '#2C2C2E',\n    border: '#38383A',\n    borderSecondary: '#48484A',\n    shadow: 'rgba(0, 0, 0, 0.3)',\n    overlay: 'rgba(0, 0, 0, 0.7)',\n  },\n  typography: lightTheme.typography,\n  spacing: lightTheme.spacing,\n  borderRadius: lightTheme.borderRadius,\n  shadows: {\n    sm: {\n      shadowColor: 'rgba(0, 0, 0, 0.3)',\n      shadowOffset: { width: 0, height: 1 },\n      shadowOpacity: 1,\n      shadowRadius: 2,\n      elevation: 2,\n    },\n    md: {\n      shadowColor: 'rgba(0, 0, 0, 0.3)',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 1,\n      shadowRadius: 4,\n      elevation: 4,\n    },\n    lg: {\n      shadowColor: 'rgba(0, 0, 0, 0.3)',\n      shadowOffset: { width: 0, height: 4 },\n      shadowOpacity: 1,\n      shadowRadius: 8,\n      elevation: 8,\n    },\n  },\n};"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/theme/index.ts",
      "description": "Export theme system components and types",
      "content": "export * from './ThemeProvider';\nexport * from './types';\nexport * from './themes';\n\nexport { useTheme } from './ThemeProvider';\nexport { lightTheme, darkTheme } from './themes';"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/theme/ThemeProvider.test.tsx",
      "description": "Create comprehensive tests for ThemeProvider",
      "content": "import React from 'react';\nimport { render, act } from '@testing-library/react-native';\nimport { ThemeProvider, useTheme } from './ThemeProvider';\nimport { lightTheme, darkTheme } from './themes';\n\n// Mock useColorScheme\nconst mockUseColorScheme = jest.fn();\njest.mock('react-native', () => ({\n  ...jest.requireActual('react-native'),\n  useColorScheme: () => mockUseColorScheme(),\n}));\n\n// Mock useAccessibility\nconst mockUseAccessibility = jest.fn();\njest.mock('../hooks/useAccessibility', () => ({\n  useAccessibility: () => mockUseAccessibility(),\n}));\n\nconst TestComponent: React.FC = () => {\n  const theme = useTheme();\n  return null;\n};\n\ndescribe('ThemeProvider', () => {\n  beforeEach(() => {\n    mockUseColorScheme.mockReturnValue('light');\n    mockUseAccessibility.mockReturnValue({ isHighContrastEnabled: false });\n  });\n\n  it('should provide light theme by default', () => {\n    const { getByTestId } = render(\n      <ThemeProvider>\n        <TestComponent />\n      </ThemeProvider>\n    );\n    \n    // Theme context should be available\n    expect(getByTestId).toBeDefined();\n  });\n\n  it('should switch to dark theme when system is dark', () => {\n    mockUseColorScheme.mockReturnValue('dark');\n    \n    const { getByTestId } = render(\n      <ThemeProvider initialTheme=\"system\">\n        <TestComponent />\n      </ThemeProvider>\n    );\n    \n    expect(getByTestId).toBeDefined();\n  });\n\n  it('should apply high contrast adjustments when enabled', () => {\n    mockUseAccessibility.mockReturnValue({ isHighContrastEnabled: true });\n    \n    const { getByTestId } = render(\n      <ThemeProvider>\n        <TestComponent />\n      </ThemeProvider>\n    );\n    \n    expect(getByTestId).toBeDefined();\n  });\n\n  it('should throw error when useTheme is used outside provider', () => {\n    expect(() => render(<TestComponent />)).toThrow(\n      'useTheme must be used within a ThemeProvider'\n    );\n  });\n});"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/theme/themes.test.ts",
      "description": "Create tests for theme configurations",
      "content": "import { lightTheme, darkTheme } from './themes';\n\ndescribe('Theme Configurations', () => {\n  describe('lightTheme', () => {\n    it('should have all required properties', () => {\n      expect(lightTheme).toHaveProperty('name', 'light');\n      expect(lightTheme).toHaveProperty('colors');\n      expect(lightTheme).toHaveProperty('typography');\n      expect(lightTheme).toHaveProperty('spacing');\n      expect(lightTheme).toHaveProperty('borderRadius');\n      expect(lightTheme).toHaveProperty('shadows');\n    });\n\n    it('should have proper color structure', () => {\n      expect(lightTheme.colors).toHaveProperty('primary');\n      expect(lightTheme.colors).toHaveProperty('text');\n      expect(lightTheme.colors).toHaveProperty('background');\n      expect(lightTheme.colors.primary).toBe('#007AFF');\n      expect(lightTheme.colors.background).toBe('#FFFFFF');\n    });\n\n    it('should have proper typography structure', () => {\n      expect(lightTheme.typography).toHaveProperty('fontFamily');\n      expect(lightTheme.typography).toHaveProperty('fontSize');\n      expect(lightTheme.typography).toHaveProperty('lineHeight');\n      expect(lightTheme.typography).toHaveProperty('fontWeight');\n    });\n  });\n\n  describe('darkTheme', () => {\n    it('should have all required properties', () => {\n      expect(darkTheme).toHaveProperty('name', 'dark');\n      expect(darkTheme).toHaveProperty('colors');\n      expect(darkTheme).toHaveProperty('typography');\n      expect(darkTheme).toHaveProperty('spacing');\n      expect(darkTheme).toHaveProperty('borderRadius');\n      expect(darkTheme).toHaveProperty('shadows');\n    });\n\n    it('should have proper dark color structure', () => {\n      expect(darkTheme.colors).toHaveProperty('primary');\n      expect(darkTheme.colors).toHaveProperty('text');\n      expect(darkTheme.colors).toHaveProperty('background');\n      expect(darkTheme.colors.primary).toBe('#0A84FF');\n      expect(darkTheme.colors.background).toBe('#000000');\n    });\n\n    it('should share typography, spacing, and borderRadius with light theme', () => {\n      expect(darkTheme.typography).toEqual(lightTheme.typography);\n      expect(darkTheme.spacing).toEqual(lightTheme.spacing);\n      expect(darkTheme.borderRadius).toEqual(lightTheme.borderRadius);\n    });\n  });\n});"
    }
  ]
} 