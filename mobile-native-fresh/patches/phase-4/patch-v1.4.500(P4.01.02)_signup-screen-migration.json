{
  "patch": {
    "id": "patch-v1.4.500(P4.01.02)_signup-screen-migration",
    "version": "v1.4.500(P4.01.02)",
    "phase": 4,
    "step": 1,
    "attempt": 2,
    "description": "SignUpScreen Migration - Complete registration screen with enterprise-grade validation and security",
    "priority": "critical",
    "risk": "high",
    "estimatedTime": "8 hours",
    "dependencies": [
      "patch-v1.4.500(P4.01.01)_signin-screen-migration",
      "patch-v1.4.400(P3.01.08)_state-management-implementation",
      "patch-v1.4.400(P3.01.07)_navigation-system-implementation",
      "patch-v1.4.400(P3.01.05)_theme-system-implementation",
      "patch-v1.4.410(P3.02.01)_core-types-definition",
      "patch-v1.4.410(P3.02.02)_core-hooks-implementation"
    ],
    "validationGates": [
      "TypeScript compilation",
      "Registration flow testing",
      "Form validation testing",
      "Email verification testing",
      "Password strength validation",
      "CAPTCHA integration testing",
      "Accessibility compliance",
      "Visual regression test",
      "Performance impact measurement",
      "Security validation"
    ],
    "successCriteria": [
      "SignUpScreen fully functional in nextgen environment",
      "All registration flows working correctly",
      "Email verification system implemented",
      "Password strength requirements enforced",
      "CAPTCHA integration working",
      "Terms of service acceptance required",
      "Accessibility compliance achieved",
      "No visual regressions",
      "Performance impact < 5%",
      "Security best practices implemented"
    ],
    "rollbackPlan": [
      "Git tag: backup-v1.4.500(P4.01.02)_signup-screen-migration",
      "Restore from src-reference/screens/SignUpScreen.tsx",
      "Revert registration state management changes",
      "Test legacy functionality"
    ],
    "gitTag": "v1.4.500(P4.01.02)_signup-screen-migration",
    "summaryFile": "summary-v1.4.500(P4.01.02)_signup-screen-migration.md",
    "branch": "phase-4-signup-migration",
    "preMutationBuild": [
      "npm run lint:guard",
      "npx tsc --noEmit",
      "npm run test:unit --watchAll=false",
      "npm run test:auth --watchAll=false"
    ],
    "postMutationBuild": [
      "npm run lint:guard",
      "npx tsc --noEmit",
      "npm run test:unit --watchAll=false",
      "npm run test:auth --watchAll=false",
      "npm run test:integration --watchAll=false",
      "npm run test:accessibility --watchAll=false",
      "npm run test:security --watchAll=false"
    ],
    "mutations": [
      {
        "type": "file_create",
        "target": "src-nextgen/screens/auth/SignUpScreen.tsx",
        "description": "Create enterprise-grade SignUpScreen with comprehensive validation, CAPTCHA, and security features",
        "content": "import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  ActivityIndicator,\n  Linking,\n} from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { useAuth } from '../hooks/useAuth';\nimport { useTheme } from '../hooks/useTheme';\nimport { useValidation } from '../hooks/useValidation';\nimport { useAccessibility } from '../hooks/useAccessibility';\nimport { usePasswordStrength } from '../hooks/usePasswordStrength';\nimport { useCaptcha } from '../hooks/useCaptcha';\nimport { Button } from '../components/Button';\nimport { Text as CustomText } from '../components/Text';\nimport { AutoRoleView } from '../components/AutoRoleView';\nimport { PasswordStrengthIndicator } from '../components/PasswordStrengthIndicator';\nimport { Checkbox } from '../components/Checkbox';\nimport { AuthError } from '../types/auth';\nimport { SignUpFormData, SignUpValidationSchema } from '../types/forms';\nimport { authService } from '../services/authService';\nimport { analyticsService } from '../services/analyticsService';\nimport { errorService } from '../services/errorService';\nimport { emailService } from '../services/emailService';\nimport { styles } from './SignUpScreen.styles';\n\nexport const SignUpScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { signUp, isLoading: authLoading, error: authError } = useAuth();\n  const { theme, colors } = useTheme();\n  const { validateForm, validationErrors, clearValidationErrors } = useValidation();\n  const { isScreenReaderEnabled } = useAccessibility();\n  const { passwordStrength, validatePassword } = usePasswordStrength();\n  const { captchaToken, verifyCaptcha, resetCaptcha } = useCaptcha();\n\n  const [formData, setFormData] = useState<SignUpFormData>({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    acceptTerms: false,\n    acceptMarketing: false,\n  });\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [emailVerificationSent, setEmailVerificationSent] = useState(false);\n  const [verificationCode, setVerificationCode] = useState('');\n  const [showVerificationInput, setShowVerificationInput] = useState(false);\n\n  // Refs for form navigation\n  const firstNameRef = useRef<TextInput>(null);\n  const lastNameRef = useRef<TextInput>(null);\n  const emailRef = useRef<TextInput>(null);\n  const passwordRef = useRef<TextInput>(null);\n  const confirmPasswordRef = useRef<TextInput>(null);\n\n  // Password strength requirements\n  const MIN_PASSWORD_LENGTH = 8;\n  const PASSWORD_REQUIREMENTS = {\n    minLength: MIN_PASSWORD_LENGTH,\n    requireUppercase: true,\n    requireLowercase: true,\n    requireNumbers: true,\n    requireSpecialChars: true,\n  };\n\n  // Handle auth errors\n  useEffect(() => {\n    if (authError) {\n      handleAuthError(authError);\n    }\n  }, [authError]);\n\n  // Handle password strength validation\n  useEffect(() => {\n    if (formData.password) {\n      validatePassword(formData.password, PASSWORD_REQUIREMENTS);\n    }\n  }, [formData.password, validatePassword]);\n\n  const handleAuthError = useCallback((error: AuthError) => {\n    Alert.alert(\n      'Registration Failed',\n      error.message,\n      [\n        { text: 'Try Again', onPress: () => resetCaptcha() },\n        { text: 'OK', style: 'default' }\n      ]\n    );\n\n    // Analytics tracking\n    analyticsService.track('sign_up_failed', {\n      error: error.code,\n      email: formData.email ? 'provided' : 'not_provided'\n    });\n\n    // Error reporting\n    errorService.reportError('sign_up_error', {\n      error,\n      timestamp: new Date().toISOString()\n    });\n  }, [authError, formData.email, resetCaptcha]);\n\n  const handleInputChange = useCallback((field: keyof SignUpFormData, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // Clear validation errors for this field\n    if (validationErrors[field]) {\n      clearValidationErrors([field]);\n    }\n  }, [validationErrors, clearValidationErrors]);\n\n  const validateFormData = useCallback(async (): Promise<boolean> => {\n    // Check password strength\n    if (passwordStrength.score < 3) {\n      Alert.alert(\n        'Weak Password',\n        'Please choose a stronger password that meets all requirements.'\n      );\n      return false;\n    }\n\n    // Check password confirmation\n    if (formData.password !== formData.confirmPassword) {\n      Alert.alert(\n        'Password Mismatch',\n        'Passwords do not match. Please try again.'\n      );\n      return false;\n    }\n\n    // Check terms acceptance\n    if (!formData.acceptTerms) {\n      Alert.alert(\n        'Terms of Service',\n        'You must accept the Terms of Service to continue.'\n      );\n      return false;\n    }\n\n    // Validate form with schema\n    const isValid = await validateForm(formData, SignUpValidationSchema);\n    \n    if (!isValid) {\n      analyticsService.track('sign_up_validation_failed', {\n        errors: Object.keys(validationErrors),\n        email: formData.email ? 'provided' : 'not_provided'\n      });\n    }\n\n    return isValid;\n  }, [formData, validateForm, validationErrors, passwordStrength.score]);\n\n  const handleSendVerificationCode = useCallback(async () => {\n    if (!formData.email) {\n      Alert.alert('Email Required', 'Please enter your email address first.');\n      return;\n    }\n\n    try {\n      await emailService.sendVerificationCode(formData.email);\n      setEmailVerificationSent(true);\n      setShowVerificationInput(true);\n      \n      Alert.alert(\n        'Verification Code Sent',\n        'Please check your email and enter the verification code.'\n      );\n\n      analyticsService.track('verification_code_sent', {\n        email: formData.email\n      });\n    } catch (error) {\n      Alert.alert(\n        'Error',\n        'Failed to send verification code. Please try again.'\n      );\n\n      errorService.reportError('verification_code_send_error', {\n        error,\n        email: formData.email,\n        timestamp: new Date().toISOString()\n      });\n    }\n  }, [formData.email]);\n\n  const handleSignUp = useCallback(async () => {\n    if (isSubmitting || authLoading) return;\n\n    setIsSubmitting(true);\n\n    try {\n      // Validate form data\n      const isValid = await validateFormData();\n      if (!isValid) {\n        setIsSubmitting(false);\n        return;\n      }\n\n      // Verify CAPTCHA\n      if (!captchaToken) {\n        Alert.alert(\n          'Security Check Required',\n          'Please complete the security check to continue.'\n        );\n        setIsSubmitting(false);\n        return;\n      }\n\n      // Verify email if verification code is provided\n      if (showVerificationInput && verificationCode) {\n        const isEmailVerified = await emailService.verifyCode(formData.email, verificationCode);\n        if (!isEmailVerified) {\n          Alert.alert(\n            'Invalid Code',\n            'The verification code is incorrect. Please try again.'\n          );\n          setIsSubmitting(false);\n          return;\n        }\n      }\n\n      // Analytics tracking\n      analyticsService.track('sign_up_attempt', {\n        email: formData.email ? 'provided' : 'not_provided',\n        marketingOptIn: formData.acceptMarketing\n      });\n\n      // Attempt sign up\n      await signUp({\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        email: formData.email,\n        password: formData.password,\n        acceptMarketing: formData.acceptMarketing,\n        captchaToken,\n      });\n\n      // Success tracking\n      analyticsService.track('sign_up_success', {\n        marketingOptIn: formData.acceptMarketing\n      });\n\n    } catch (error) {\n      console.error('Sign up error:', error);\n      \n      // Error reporting\n      errorService.reportError('sign_up_unexpected_error', {\n        error,\n        formData: { \n          email: formData.email ? 'provided' : 'not_provided',\n          marketingOptIn: formData.acceptMarketing\n        },\n        timestamp: new Date().toISOString()\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [\n    isSubmitting,\n    authLoading,\n    validateFormData,\n    captchaToken,\n    showVerificationInput,\n    verificationCode,\n    formData,\n    signUp\n  ]);\n\n  const handleTermsPress = useCallback(() => {\n    Linking.openURL('https://thoughtmarks.app/terms');\n  }, []);\n\n  const handlePrivacyPress = useCallback(() => {\n    Linking.openURL('https://thoughtmarks.app/privacy');\n  }, []);\n\n  const handleSignIn = useCallback(() => {\n    analyticsService.track('sign_in_clicked_from_signup');\n    navigation.navigate('SignIn');\n  }, [navigation]);\n\n  const isFormValid = \n    formData.firstName.length > 0 &&\n    formData.lastName.length > 0 &&\n    formData.email.length > 0 &&\n    formData.password.length >= MIN_PASSWORD_LENGTH &&\n    formData.confirmPassword === formData.password &&\n    formData.acceptTerms &&\n    passwordStrength.score >= 3;\n\n  const isLoading = isSubmitting || authLoading;\n\n  return (\n    <KeyboardAvoidingView\n      style={[styles.container, { backgroundColor: colors.background }]}\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n    >\n      <ScrollView\n        contentContainerStyle={styles.scrollContent}\n        keyboardShouldPersistTaps=\"handled\"\n        showsVerticalScrollIndicator={false}\n      >\n        <AutoRoleView\n          layoutRole=\"auth-container\"\n          style={styles.content}\n        >\n          {/* Header */}\n          <AutoRoleView layoutRole=\"auth-header\" style={styles.header}>\n            <CustomText\n              variant=\"h1\"\n              style={[styles.title, { color: colors.text }]}\n              accessibilityRole=\"header\"\n            >\n              Create Account\n            </CustomText>\n            <CustomText\n              variant=\"body\"\n              style={[styles.subtitle, { color: colors.textSecondary }]}\n            >\n              Join Thoughtmarks and start organizing your ideas\n            </CustomText>\n          </AutoRoleView>\n\n          {/* Form */}\n          <AutoRoleView layoutRole=\"auth-form\" style={styles.form}>\n            {/* Name Fields */}\n            <View style={styles.nameContainer}>\n              <AutoRoleView layoutRole=\"form-field\" style={styles.nameField}>\n                <CustomText\n                  variant=\"label\"\n                  style={[styles.label, { color: colors.text }]}\n                  accessibilityRole=\"text\"\n                >\n                  First Name\n                </CustomText>\n                <TextInput\n                  ref={firstNameRef}\n                  style={[\n                    styles.input,\n                    {\n                      backgroundColor: colors.surface,\n                      color: colors.text,\n                      borderColor: validationErrors.firstName ? colors.error : colors.border\n                    }\n                  ]}\n                  value={formData.firstName}\n                  onChangeText={(value) => handleInputChange('firstName', value)}\n                  placeholder=\"First name\"\n                  placeholderTextColor={colors.textSecondary}\n                  autoCapitalize=\"words\"\n                  autoCorrect={false}\n                  textContentType=\"givenName\"\n                  returnKeyType=\"next\"\n                  onSubmitEditing={() => lastNameRef.current?.focus()}\n                  accessibilityLabel=\"First name input field\"\n                  accessibilityHint=\"Enter your first name\"\n                  accessibilityRole=\"text\"\n                  accessibilityState={{ invalid: !!validationErrors.firstName }}\n                  editable={!isLoading}\n                />\n                {validationErrors.firstName && (\n                  <CustomText\n                    variant=\"caption\"\n                    style={[styles.errorText, { color: colors.error }]}\n                    accessibilityRole=\"text\"\n                  >\n                    {validationErrors.firstName}\n                  </CustomText>\n                )}\n              </AutoRoleView>\n\n              <AutoRoleView layoutRole=\"form-field\" style={styles.nameField}>\n                <CustomText\n                  variant=\"label\"\n                  style={[styles.label, { color: colors.text }]}\n                  accessibilityRole=\"text\"\n                >\n                  Last Name\n                </CustomText>\n                <TextInput\n                  ref={lastNameRef}\n                  style={[\n                    styles.input,\n                    {\n                      backgroundColor: colors.surface,\n                      color: colors.text,\n                      borderColor: validationErrors.lastName ? colors.error : colors.border\n                    }\n                  ]}\n                  value={formData.lastName}\n                  onChangeText={(value) => handleInputChange('lastName', value)}\n                  placeholder=\"Last name\"\n                  placeholderTextColor={colors.textSecondary}\n                  autoCapitalize=\"words\"\n                  autoCorrect={false}\n                  textContentType=\"familyName\"\n                  returnKeyType=\"next\"\n                  onSubmitEditing={() => emailRef.current?.focus()}\n                  accessibilityLabel=\"Last name input field\"\n                  accessibilityHint=\"Enter your last name\"\n                  accessibilityRole=\"text\"\n                  accessibilityState={{ invalid: !!validationErrors.lastName }}\n                  editable={!isLoading}\n                />\n                {validationErrors.lastName && (\n                  <CustomText\n                    variant=\"caption\"\n                    style={[styles.errorText, { color: colors.error }]}\n                    accessibilityRole=\"text\"\n                  >\n                    {validationErrors.lastName}\n                  </CustomText>\n                )}\n              </AutoRoleView>\n            </View>\n\n            {/* Email Input */}\n            <AutoRoleView layoutRole=\"form-field\" style={styles.inputContainer}>\n              <CustomText\n                variant=\"label\"\n                style={[styles.label, { color: colors.text }]}\n                accessibilityRole=\"text\"\n              >\n                Email\n              </CustomText>\n              <TextInput\n                ref={emailRef}\n                style={[\n                  styles.input,\n                  {\n                    backgroundColor: colors.surface,\n                    color: colors.text,\n                    borderColor: validationErrors.email ? colors.error : colors.border\n                  }\n                ]}\n                value={formData.email}\n                onChangeText={(value) => handleInputChange('email', value)}\n                placeholder=\"Enter your email\"\n                placeholderTextColor={colors.textSecondary}\n                keyboardType=\"email-address\"\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                autoComplete=\"email\"\n                textContentType=\"emailAddress\"\n                returnKeyType=\"next\"\n                onSubmitEditing={() => passwordRef.current?.focus()}\n                accessibilityLabel=\"Email input field\"\n                accessibilityHint=\"Enter your email address\"\n                accessibilityRole=\"text\"\n                accessibilityState={{ invalid: !!validationErrors.email }}\n                editable={!isLoading}\n              />\n              {validationErrors.email && (\n                <CustomText\n                  variant=\"caption\"\n                  style={[styles.errorText, { color: colors.error }]}\n                  accessibilityRole=\"text\"\n                >\n                  {validationErrors.email}\n                </CustomText>\n              )}\n            </AutoRoleView>\n\n            {/* Password Input */}\n            <AutoRoleView layoutRole=\"form-field\" style={styles.inputContainer}>\n              <CustomText\n                variant=\"label\"\n                style={[styles.label, { color: colors.text }]}\n                accessibilityRole=\"text\"\n              >\n                Password\n              </CustomText>\n              <View style={styles.passwordContainer}>\n                <TextInput\n                  ref={passwordRef}\n                  style={[\n                    styles.input,\n                    styles.passwordInput,\n                    {\n                      backgroundColor: colors.surface,\n                      color: colors.text,\n                      borderColor: validationErrors.password ? colors.error : colors.border\n                    }\n                  ]}\n                  value={formData.password}\n                  onChangeText={(value) => handleInputChange('password', value)}\n                  placeholder=\"Create a password\"\n                  placeholderTextColor={colors.textSecondary}\n                  secureTextEntry={!showPassword}\n                  autoCapitalize=\"none\"\n                  autoCorrect={false}\n                  autoComplete=\"new-password\"\n                  textContentType=\"newPassword\"\n                  returnKeyType=\"next\"\n                  onSubmitEditing={() => confirmPasswordRef.current?.focus()}\n                  accessibilityLabel=\"Password input field\"\n                  accessibilityHint=\"Create a strong password\"\n                  accessibilityRole=\"text\"\n                  accessibilityState={{ invalid: !!validationErrors.password }}\n                  editable={!isLoading}\n                />\n                <TouchableOpacity\n                  style={styles.eyeButton}\n                  onPress={() => setShowPassword(!showPassword)}\n                  accessibilityLabel={showPassword ? 'Hide password' : 'Show password'}\n                  accessibilityRole=\"button\"\n                  disabled={isLoading}\n                >\n                  <CustomText\n                    variant=\"body\"\n                    style={[styles.eyeButtonText, { color: colors.textSecondary }]}\n                  >\n                    {showPassword ? '👁️' : '👁️‍🗨️'}\n                  </CustomText>\n                </TouchableOpacity>\n              </View>\n              \n              {/* Password Strength Indicator */}\n              <PasswordStrengthIndicator\n                strength={passwordStrength}\n                requirements={PASSWORD_REQUIREMENTS}\n                style={styles.passwordStrength}\n              />\n              \n              {validationErrors.password && (\n                <CustomText\n                  variant=\"caption\"\n                  style={[styles.errorText, { color: colors.error }]}\n                  accessibilityRole=\"text\"\n                >\n                  {validationErrors.password}\n                </CustomText>\n              )}\n            </AutoRoleView>\n\n            {/* Confirm Password Input */}\n            <AutoRoleView layoutRole=\"form-field\" style={styles.inputContainer}>\n              <CustomText\n                variant=\"label\"\n                style={[styles.label, { color: colors.text }]}\n                accessibilityRole=\"text\"\n              >\n                Confirm Password\n              </CustomText>\n              <View style={styles.passwordContainer}>\n                <TextInput\n                  ref={confirmPasswordRef}\n                  style={[\n                    styles.input,\n                    styles.passwordInput,\n                    {\n                      backgroundColor: colors.surface,\n                      color: colors.text,\n                      borderColor: formData.confirmPassword && formData.password !== formData.confirmPassword ? colors.error : colors.border\n                    }\n                  ]}\n                  value={formData.confirmPassword}\n                  onChangeText={(value) => handleInputChange('confirmPassword', value)}\n                  placeholder=\"Confirm your password\"\n                  placeholderTextColor={colors.textSecondary}\n                  secureTextEntry={!showConfirmPassword}\n                  autoCapitalize=\"none\"\n                  autoCorrect={false}\n                  autoComplete=\"new-password\"\n                  textContentType=\"newPassword\"\n                  accessibilityLabel=\"Confirm password input field\"\n                  accessibilityHint=\"Confirm your password\"\n                  accessibilityRole=\"text\"\n                  accessibilityState={{ \n                    invalid: formData.confirmPassword && formData.password !== formData.confirmPassword \n                  }}\n                  editable={!isLoading}\n                />\n                <TouchableOpacity\n                  style={styles.eyeButton}\n                  onPress={() => setShowConfirmPassword(!showConfirmPassword)}\n                  accessibilityLabel={showConfirmPassword ? 'Hide confirm password' : 'Show confirm password'}\n                  accessibilityRole=\"button\"\n                  disabled={isLoading}\n                >\n                  <CustomText\n                    variant=\"body\"\n                    style={[styles.eyeButtonText, { color: colors.textSecondary }]}\n                  >\n                    {showConfirmPassword ? '👁️' : '👁️‍🗨️'}\n                  </CustomText>\n                </TouchableOpacity>\n              </View>\n              {formData.confirmPassword && formData.password !== formData.confirmPassword && (\n                <CustomText\n                  variant=\"caption\"\n                  style={[styles.errorText, { color: colors.error }]}\n                  accessibilityRole=\"text\"\n                >\n                  Passwords do not match\n                </CustomText>\n              )}\n            </AutoRoleView>\n\n            {/* Email Verification */}\n            {!emailVerificationSent && formData.email && (\n              <TouchableOpacity\n                style={styles.verificationButton}\n                onPress={handleSendVerificationCode}\n                accessibilityLabel=\"Send verification code button\"\n                accessibilityRole=\"button\"\n                disabled={isLoading}\n              >\n                <CustomText\n                  variant=\"body\"\n                  style={[styles.verificationButtonText, { color: colors.primary }]}\n                >\n                  Send Verification Code\n                </CustomText>\n              </TouchableOpacity>\n            )}\n\n            {showVerificationInput && (\n              <AutoRoleView layoutRole=\"form-field\" style={styles.inputContainer}>\n                <CustomText\n                  variant=\"label\"\n                  style={[styles.label, { color: colors.text }]}\n                  accessibilityRole=\"text\"\n                >\n                  Verification Code\n                </CustomText>\n                <TextInput\n                  style={[\n                    styles.input,\n                    {\n                      backgroundColor: colors.surface,\n                      color: colors.text,\n                      borderColor: colors.border\n                    }\n                  ]}\n                  value={verificationCode}\n                  onChangeText={setVerificationCode}\n                  placeholder=\"Enter verification code\"\n                  placeholderTextColor={colors.textSecondary}\n                  keyboardType=\"number-pad\"\n                  maxLength={6}\n                  accessibilityLabel=\"Verification code input field\"\n                  accessibilityHint=\"Enter the 6-digit verification code sent to your email\"\n                  accessibilityRole=\"text\"\n                  editable={!isLoading}\n                />\n              </AutoRoleView>\n            )}\n\n            {/* Terms and Conditions */}\n            <AutoRoleView layoutRole=\"form-field\" style={styles.checkboxContainer}>\n              <Checkbox\n                value={formData.acceptTerms}\n                onValueChange={(value) => handleInputChange('acceptTerms', value)}\n                accessibilityLabel=\"Accept terms and conditions checkbox\"\n                accessibilityRole=\"checkbox\"\n                disabled={isLoading}\n              />\n              <View style={styles.termsTextContainer}>\n                <CustomText\n                  variant=\"body\"\n                  style={[styles.termsText, { color: colors.textSecondary }]}\n                  accessibilityRole=\"text\"\n                >\n                  I accept the{' '}\n                </CustomText>\n                <TouchableOpacity\n                  onPress={handleTermsPress}\n                  accessibilityLabel=\"Terms of service link\"\n                  accessibilityRole=\"link\"\n                  disabled={isLoading}\n                >\n                  <CustomText\n                    variant=\"body\"\n                    style={[styles.termsLink, { color: colors.primary }]}\n                  >\n                    Terms of Service\n                  </CustomText>\n                </TouchableOpacity>\n                <CustomText\n                  variant=\"body\"\n                  style={[styles.termsText, { color: colors.textSecondary }]}\n                  accessibilityRole=\"text\"\n                >\n                  {' '}and{' '}\n                </CustomText>\n                <TouchableOpacity\n                  onPress={handlePrivacyPress}\n                  accessibilityLabel=\"Privacy policy link\"\n                  accessibilityRole=\"link\"\n                  disabled={isLoading}\n                >\n                  <CustomText\n                    variant=\"body\"\n                    style={[styles.termsLink, { color: colors.primary }]}\n                  >\n                    Privacy Policy\n                  </CustomText>\n                </TouchableOpacity>\n              </View>\n            </AutoRoleView>\n\n            {/* Marketing Opt-in */}\n            <AutoRoleView layoutRole=\"form-field\" style={styles.checkboxContainer}>\n              <Checkbox\n                value={formData.acceptMarketing}\n                onValueChange={(value) => handleInputChange('acceptMarketing', value)}\n                accessibilityLabel=\"Accept marketing communications checkbox\"\n                accessibilityRole=\"checkbox\"\n                disabled={isLoading}\n              />\n              <CustomText\n                variant=\"body\"\n                style={[styles.marketingText, { color: colors.textSecondary }]}\n                accessibilityRole=\"text\"\n              >\n                I would like to receive updates about new features and promotions\n              </CustomText>\n            </AutoRoleView>\n\n            {/* Sign Up Button */}\n            <Button\n              title={isLoading ? 'Creating Account...' : 'Create Account'}\n              onPress={handleSignUp}\n              disabled={!isFormValid || isLoading}\n              loading={isLoading}\n              style={styles.signUpButton}\n              accessibilityLabel=\"Create account button\"\n              accessibilityHint=\"Tap to create your account\"\n              accessibilityRole=\"button\"\n              accessibilityState={{ disabled: !isFormValid || isLoading }}\n            />\n          </AutoRoleView>\n\n          {/* Footer */}\n          <AutoRoleView layoutRole=\"auth-footer\" style={styles.footer}>\n            <CustomText\n              variant=\"body\"\n              style={[styles.footerText, { color: colors.textSecondary }]}\n              accessibilityRole=\"text\"\n            >\n              Already have an account?{' '}\n            </CustomText>\n            <TouchableOpacity\n              onPress={handleSignIn}\n              accessibilityLabel=\"Sign in link\"\n              accessibilityRole=\"link\"\n              disabled={isLoading}\n            >\n              <CustomText\n                variant=\"body\"\n                style={[styles.signInLink, { color: colors.primary }]}\n              >\n                Sign In\n              </CustomText>\n            </TouchableOpacity>\n          </AutoRoleView>\n        </AutoRoleView>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n};"
      },
      {
        "type": "file_create",
        "target": "src-nextgen/screens/auth/SignUpScreen.styles.ts",
        "description": "Create comprehensive styles for SignUpScreen with theme support",
        "content": "import { StyleSheet } from 'react-native';\nimport { ThemeColors } from '../types/theme';\n\nexport const createStyles = (colors: ThemeColors) => StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scrollContent: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 24,\n    paddingVertical: 32,\n  },\n  content: {\n    width: '100%',\n    maxWidth: 400,\n    alignSelf: 'center',\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 48,\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    textAlign: 'center',\n    opacity: 0.8,\n  },\n  form: {\n    marginBottom: 32,\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    gap: 12,\n    marginBottom: 24,\n  },\n  nameField: {\n    flex: 1,\n  },\n  inputContainer: {\n    marginBottom: 24,\n  },\n  label: {\n    fontSize: 14,\n    fontWeight: '600',\n    marginBottom: 8,\n  },\n  input: {\n    height: 48,\n    borderWidth: 1,\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    fontSize: 16,\n  },\n  passwordContainer: {\n    position: 'relative',\n  },\n  passwordInput: {\n    paddingRight: 48,\n  },\n  eyeButton: {\n    position: 'absolute',\n    right: 12,\n    top: 12,\n    width: 24,\n    height: 24,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  eyeButtonText: {\n    fontSize: 16,\n  },\n  passwordStrength: {\n    marginTop: 8,\n  },\n  errorText: {\n    fontSize: 12,\n    marginTop: 4,\n    marginLeft: 4,\n  },\n  verificationButton: {\n    alignSelf: 'flex-end',\n    marginBottom: 24,\n  },\n  verificationButtonText: {\n    fontSize: 14,\n    textDecorationLine: 'underline',\n  },\n  checkboxContainer: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    marginBottom: 16,\n  },\n  termsTextContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginLeft: 8,\n  },\n  termsText: {\n    fontSize: 14,\n  },\n  termsLink: {\n    fontSize: 14,\n    textDecorationLine: 'underline',\n  },\n  marketingText: {\n    fontSize: 14,\n    marginLeft: 8,\n    flex: 1,\n  },\n  signUpButton: {\n    height: 48,\n    borderRadius: 8,\n    marginTop: 16,\n  },\n  footer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  footerText: {\n    fontSize: 14,\n  },\n  signInLink: {\n    fontSize: 14,\n    fontWeight: '600',\n    textDecorationLine: 'underline',\n  },\n});\n\nexport const styles = createStyles({\n  background: '#FFFFFF',\n  surface: '#F8F9FA',\n  text: '#1A1A1A',\n  textSecondary: '#6C757D',\n  primary: '#007AFF',\n  error: '#DC3545',\n  border: '#DEE2E6',\n} as ThemeColors);"
      },
      {
        "type": "file_update",
        "target": "src-nextgen/screens/auth/index.ts",
        "description": "Export SignUpScreen from auth screens index",
        "content": "export { SignInScreen } from './SignInScreen';\nexport { SignUpScreen } from './SignUpScreen';\n\nexport * from './SignInScreen';\nexport * from './SignUpScreen';\n"
      }
    ]
  }
} 