import React from 'react';
import { View, Text } from 'react-native';
import { render, fireEvent } from '@/__tests__/helpers/test-utils';
import { Link } from './Link';

describe('Link', () => {
  beforeEach(() => {
    require('@/__tests__/helpers/test-utils').resetAllMocks();
  });

  it('should render link text', () => {
    const onPress = jest.fn();
    const { getByText } = render(
      <Link onPress={onPress}><Text>Click me</Text></Link>
    );
    expect(getByText('Click me')).toBeDefined();
  });

  it('should call onPress when pressed', () => {
    const onPress = jest.fn();
    const { getByText } = render(
      <Link onPress={onPress}><Text>Click me</Text></Link>
    );
    
    fireEvent.press(getByText('Click me'));
    expect(onPress).toHaveBeenCalledTimes(1);
  });

  it('should render disabled link', () => {
    const onPress = jest.fn();
    const { getByText } = render(
      <Link onPress={onPress} disabled><Text>Disabled Link</Text></Link>
    );
    expect(getByText('Disabled Link')).toBeDefined();
  });

  it('should render link without underline', () => {
    const onPress = jest.fn();
    const { getByText } = render(
      <Link onPress={onPress} underline={false}><Text>No Underline</Text></Link>
    );
    expect(getByText('No Underline')).toBeDefined();
  });

  it('should not call onPress when disabled', () => {
    const onPress = jest.fn();
    const { getByText } = render(
      <Link onPress={onPress} disabled><Text>Disabled Link</Text></Link>
    );
    
    fireEvent.press(getByText('Disabled Link'));
    expect(onPress).not.toHaveBeenCalled();
  });

  it('should handle accessibility props', () => {
    const onPress = jest.fn();
    const { getByText } = render(
      <Link 
        onPress={onPress}
        accessible={true}
        accessibilityLabel="Click to navigate"
        accessibilityHint="Navigates to the next screen"
      >
        <Text>Accessible Link</Text>
      </Link>
    );
    expect(getByText('Accessible Link')).toBeDefined();
  });
}); 