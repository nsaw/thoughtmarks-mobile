import React from 'react';
import { render, RenderOptions } from '@testing-library/react-native';
import { ThemeProvider } from '@/theme/ThemeProvider';

// Mock all system singletons
jest.mock('@/utils/PerformanceMonitor', () => ({
  PerformanceMonitor: {
    getInstance: jest.fn(() => ({
      recordComponentMetrics: jest.fn(),
      recordRenderTime: jest.fn(),
      recordMemoryUsage: jest.fn(),
      recordStartupTime: jest.fn(),
      detectMemoryLeaks: jest.fn(),
      establishBaseline: jest.fn(),
      destroy: jest.fn(),
    })),
  },
}));

jest.mock('@/utils/ValidationSystem', () => ({
  ValidationSystem: {
    getInstance: jest.fn(() => ({
      validateComponent: jest.fn(() => Promise.resolve({ isValid: true, errors: [] })),
      validateScreen: jest.fn(() => Promise.resolve({ isValid: true, errors: [] })),
      validateBundle: jest.fn(() => Promise.resolve({ isValid: true, errors: [] })),
      validateEnvironment: jest.fn(() => Promise.resolve({ isValid: true, errors: [] })),
      validateNetwork: jest.fn(() => Promise.resolve({ isValid: true, errors: [] })),
      validatePlatform: jest.fn(() => Promise.resolve({ isValid: true, errors: [] })),
      destroy: jest.fn(),
    })),
  },
}));

jest.mock('@/navigation/NavigationSystem', () => ({
  NavigationSystem: {
    getInstance: jest.fn(() => ({
      navigate: jest.fn(),
      getCurrentState: jest.fn(() => ({ name: 'TestScreen', params: {} })),
      addListener: jest.fn(),
      destroy: jest.fn(),
    })),
  },
}));

jest.mock('@/state/StateManagementSystem', () => ({
  StateManagementSystem: {
    getInstance: jest.fn(() => ({
      setState: jest.fn(),
      getState: jest.fn(() => ({})),
      getStateHistory: jest.fn(() => []),
      subscribe: jest.fn(),
      clearState: jest.fn(),
      destroy: jest.fn(),
    })),
  },
}));

jest.mock('@/error/ErrorBoundarySystem', () => ({
  ErrorBoundarySystem: {
    getInstance: jest.fn(() => ({
      handleError: jest.fn(),
      addRecoveryStrategy: jest.fn(),
      getErrors: jest.fn(() => []),
      clearErrors: jest.fn(),
      addListener: jest.fn(),
      destroy: jest.fn(),
    })),
  },
}));

// Custom render function with ThemeProvider
const customRender = (
  ui: React.ReactElement,
  options?: Omit<RenderOptions, 'wrapper'>
) => {
  const AllTheProviders = ({ children }: { children: React.ReactNode }) => {
    return <ThemeProvider>{children}</ThemeProvider>;
  };

  return render(ui, { wrapper: AllTheProviders, ...options });
};

// Reset all mocks before each test
export const resetAllMocks = () => {
  jest.clearAllMocks();
  
  // Reset PerformanceMonitor mock
  const { PerformanceMonitor } = require('@/utils/PerformanceMonitor');
  PerformanceMonitor.getInstance.mockReturnValue({
    recordComponentMetrics: jest.fn(),
    recordRenderTime: jest.fn(),
    recordMemoryUsage: jest.fn(),
    recordStartupTime: jest.fn(),
    detectMemoryLeaks: jest.fn(),
    establishBaseline: jest.fn(),
    destroy: jest.fn(),
  });

  // Reset ValidationSystem mock
  const { ValidationSystem } = require('@/utils/ValidationSystem');
  ValidationSystem.getInstance.mockReturnValue({
    validateComponent: jest.fn(() => Promise.resolve({ isValid: true, errors: [] })),
    validateScreen: jest.fn(() => Promise.resolve({ isValid: true, errors: [] })),
    validateBundle: jest.fn(() => Promise.resolve({ isValid: true, errors: [] })),
    validateEnvironment: jest.fn(() => Promise.resolve({ isValid: true, errors: [] })),
    validateNetwork: jest.fn(() => Promise.resolve({ isValid: true, errors: [] })),
    validatePlatform: jest.fn(() => Promise.resolve({ isValid: true, errors: [] })),
    destroy: jest.fn(),
  });

  // Reset NavigationSystem mock
  const { NavigationSystem } = require('@/navigation/NavigationSystem');
  NavigationSystem.getInstance.mockReturnValue({
    navigate: jest.fn(),
    getCurrentState: jest.fn(() => ({ name: 'TestScreen', params: {} })),
    addListener: jest.fn(),
    destroy: jest.fn(),
  });

  // Reset StateManagementSystem mock
  const { StateManagementSystem } = require('@/state/StateManagementSystem');
  StateManagementSystem.getInstance.mockReturnValue({
    setState: jest.fn(),
    getState: jest.fn(() => ({})),
    getStateHistory: jest.fn(() => []),
    subscribe: jest.fn(),
    clearState: jest.fn(),
    destroy: jest.fn(),
  });

  // Reset ErrorBoundarySystem mock
  const { ErrorBoundarySystem } = require('@/error/ErrorBoundarySystem');
  ErrorBoundarySystem.getInstance.mockReturnValue({
    handleError: jest.fn(),
    addRecoveryStrategy: jest.fn(),
    getErrors: jest.fn(() => []),
    clearErrors: jest.fn(),
    addListener: jest.fn(),
    destroy: jest.fn(),
  });
};

// Export everything from testing library
export * from '@testing-library/react-native';

// Export custom render function
export { customRender as render }; 