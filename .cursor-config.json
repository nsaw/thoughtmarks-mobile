{
  "defaultAgent": "thoughtmarks-dev",
  "theme": "cursor-dark",
  "autoSave": true,
  "useGitHubCopilot": true,
  "agents": {
    "thoughtmarks-dev": {
      "name": "ðŸ§  Thoughtmarks Dev",
      "model": "gpt-4o",
      "temperature": 0.3,
      "prompt": "You're Nick Sawyer's dev brain. This is Thoughtmarksâ€”a cognitive bookmarking app in React Native and Expo. Be practical, skeptical, and elegant. Prioritize readability, smooth gestures, mobile-native polish, and clarity over cleverness. Use useTheme() context, not token refs. Always prefer visual consistency over deep abstraction. Never explain yourselfâ€”just get it done."
    },
    "refactor-ui-agent": {
      "name": "ðŸ§¼ UI Refactor Agent",
      "model": "claude-3.5-sonnet",
      "temperature": 0.2,
      "prompt": "You clean Thoughtmarks UI. Enforce rhythm, clarity, and visual hierarchy. Never break gestures or accessibility. Use Tailwind. Eliminate visual bloat. Always favor clarity."
    },
    "swiftui-migration-consultant": {
      "name": "ðŸ“± SwiftUI Consultant",
      "model": "gpt-4",
      "temperature": 0.4,
      "prompt": "You consult on Thoughtmarks SwiftUI wrappers. Only migrate if there's a measurable perf or UI gain. Avoid over-engineering. Keep the React Native core."
    },
    "quick-edit-agent": {
      "name": "âš¡ Quick Fixes (Mini)",
      "model": "cursor-small",
      "temperature": 0.25,
      "prompt": "Fast, surgical code edits. Types, comments, obvious bugs. Minimal changes only. No styling or architecture unless told. Keep your hands clean."
    }
  },
  "persona": {
    "voice": "Witty, irreverent, and practical. Prioritize clarity, surprise, and emotional connection. Don't explainâ€”show.",
    "codingStyle": "Readable, minimal, and modular. Tailwind-first for UI. Avoid inline styles. Use useTheme() and tokens. Don't repeat yourself. Avoid magic.",
    "git": {
      "tagFormat": "vX.Y.Z_description_YYMMDD_HHMMUTC",
      "backupFolder": "/Users/sawyer/gitBackups/",
      "aliases": {
        "gbackup": "scripts/backup-tag-push.sh"
      }
    }
  },
  "designSystem": {
    "tokensFile": "src/theme/tokens.ts",
    "variantsFile": "src/theme/variants.ts",
    "themeProvider": "src/theme/ThemeProvider.tsx",
    "uiComponentsPath": "src/components/ui/"
  },
  "style": {
    "enforceTokenUsage": true,
    "disallowInlineOverrides": true,
    "fallbackSafeAccess": true,
    "guardTokenAccess": {
      "disallowGlobalTokenRefs": true,
      "allowedPattern": "^tokens\\?.[a-zA-Z]+\\?.[a-zA-Z]+(\\s|\\)|\\]|\\'|\"|$)"
    }
  },
  "parseCheck": true,
  "onParseFail": "revert-and-alert",
  "postMutationBuild": "tsc --noEmit || npm run lint",
  "blockCommitOnError": true,
  "alertUserOnParseFail": true,
  "consoleWatch": {
    "autoFixPatterns": [
      "ReferenceError: Property 'tokens' doesn't exist",
      "Cannot read property .* of undefined",
      "Text strings must be rendered within a <Text>"
    ],
    "autoContinue": true
  },
  "reference": {
    "styleGuide": "references/style-guide.md",
    "agentInstructions": "references/agent-instructions.md",
    "gitStructure": "references/git-structure.md",
    "blockLibrary": "tasks/"
  },
  "tasks": {
    "overhaul-ui-system": {
      "autoCommit": true,
      "checkpoints": [
        "Visual Hierarchy",
        "Layout Simplification",
        "Native Visual Language",
        "Motion + UX Feedback",
        "Readability + Tag UX",
        "Native Optimization",
        "Final Cleanup"
      ]
    }
  },
  "eslint": {
    "rules": {
      "no-global-theme/tokens": "error",
      "no-inline-accessibility-props-in-function/no-inline-accessibility-props-in-function": "error"
    },
    "plugins": [
      "react",
      "no-inline-accessibility-props-in-function"
    ]
  },
  "guard-theme-scope": {
    "description": "Ensure tokens.colors usage is scoped to component functions only",
    "autoCommit": true,
    "scope": [
      "src/components/ui/",
      "src/features/"
    ],
    "watchConsole": true,
    "autoContinue": true,
    "command": "Audit and refactor all top-level theme token usage. Replace any static references to tokens.colors.* outside component scope with getStyles(tokens) factories or inline useTheme(). Fix StyleSheet.create() definitions as needed."
  },
  "overrides": [
    {
      "files": [
        "**/*.tsx",
        "**/*.ts"
      ],
      "rules": {
        "no-global-theme/tokens": [
          "error",
          {
            "message": "Avoid top-level access to tokens.colors.*. Wrap inside getStyles(tokens) or call useTheme() inside components."
          }
        ],
        "no-inline-accessibility-props-in-function/no-inline-accessibility-props-in-function": "error"
      }
    }
  ],
  "autopilot": {
    "enabled": true,
    "safety": "high"
  }
}
