import React from 'react';
import { render } from '@/__tests__/helpers/test-utils';
import { NavigationProvider } from './NavigationProvider';
import { resetAllMocks } from '@/__tests__/helpers/test-utils';

describe('NavigationProvider', () => {
  beforeEach(() => {
    resetAllMocks();
  });

  it('should render navigation container', () => {
    const { getByTestId } = render(
      <NavigationProvider testID="navigation-container">
        <div>Test Content</div>
      </NavigationProvider>
    );
    
    expect(getByTestId('navigation-container')).toBeDefined();
  });

  it('should provide navigation context to children', () => {
    const { getByText } = render(
      <NavigationProvider>
        <div>Test Content</div>
      </NavigationProvider>
    );
    
    expect(getByText('Test Content')).toBeDefined();
  });

  it('should handle navigation state changes', () => {
    const { getByTestId } = render(
      <NavigationProvider testID="navigation-container">
        <div>Test Content</div>
      </NavigationProvider>
    );
    
    const container = getByTestId('navigation-container');
    expect(container).toBeDefined();
  });

  it('should handle navigation errors gracefully', () => {
    const { getByTestId } = render(
      <NavigationProvider testID="navigation-container">
        <div>Test Content</div>
      </NavigationProvider>
    );
    
    const container = getByTestId('navigation-container');
    expect(container).toBeDefined();
  });

  it('should provide navigation theme', () => {
    const { getByTestId } = render(
      <NavigationProvider testID="navigation-container">
        <div>Test Content</div>
      </NavigationProvider>
    );
    
    const container = getByTestId('navigation-container');
    expect(container).toBeDefined();
  });

  it('should handle deep linking', () => {
    const { getByTestId } = render(
      <NavigationProvider testID="navigation-container">
        <div>Test Content</div>
      </NavigationProvider>
    );
    
    const container = getByTestId('navigation-container');
    expect(container).toBeDefined();
  });
}); 