import { renderHook } from '@testing-library/react-native';
import { useAccessibilityProps } from './useAccessibilityProps';
import { resetAllMocks } from '@/__tests__/helpers/test-utils';

describe('useAccessibilityProps', () => {
  beforeEach(() => {
    resetAllMocks();
  });

  it('should return default accessibility props', () => {
    const { result } = renderHook(() => useAccessibilityProps());
    
    expect(result.current.accessible).toBe(true);
    expect(result.current.accessibilityLabel).toBeUndefined();
    expect(result.current.accessibilityHint).toBeUndefined();
    expect(result.current.accessibilityRole).toBeUndefined();
  });

  it('should apply custom accessibility props', () => {
    const props = {
      accessibilityLabel: 'Custom label',
      accessibilityHint: 'Custom hint',
      accessibilityRole: 'button',
    };
    
    const { result } = renderHook(() => useAccessibilityProps(props));
    
    expect(result.current.accessible).toBe(true);
    expect(result.current.accessibilityLabel).toBe('Custom label');
    expect(result.current.accessibilityHint).toBe('Custom hint');
    expect(result.current.accessibilityRole).toBe('button');
  });

  it('should disable accessibility when accessible is false', () => {
    const props = { accessible: false };
    
    const { result } = renderHook(() => useAccessibilityProps(props));
    
    expect(result.current.accessible).toBe(false);
  });

  it('should disable accessibility when screen reader is disabled', () => {
    // Mock AccessibilityInfo to return disabled
    const mockAccessibilityInfo = require('react-native').AccessibilityInfo;
    mockAccessibilityInfo.isHighTextContrastEnabled.mockResolvedValue(false);
    
    const { result } = renderHook(() => useAccessibilityProps({ disableWhenScreenReaderOff: true }));
    
    expect(result.current.accessible).toBe(false);
  });

  it('should force accessibility when importantForAccessibility is yes', () => {
    const props = {
      accessible: false,
      importantForAccessibility: 'yes' as const,
    };
    
    const { result } = renderHook(() => useAccessibilityProps(props));
    
    expect(result.current.accessible).toBe(true);
  });

  it('should handle accessibility state', () => {
    const props = {
      accessibilityState: { disabled: true, selected: false },
    };
    
    const { result } = renderHook(() => useAccessibilityProps(props));
    
    expect(result.current.accessibilityState).toEqual({ disabled: true, selected: false });
  });

  it('should handle accessibility actions', () => {
    const actions = [
      { name: 'activate', label: 'Activate' },
      { name: 'longpress', label: 'Long press' },
    ];
    
    const { result } = renderHook(() => useAccessibilityProps({ accessibilityActions: actions }));
    
    expect(result.current.accessibilityActions).toEqual(actions);
  });

  it('should handle accessibility value', () => {
    const value = { min: 0, max: 100, now: 50 };
    
    const { result } = renderHook(() => useAccessibilityProps({ accessibilityValue: value }));
    
    expect(result.current.accessibilityValue).toEqual(value);
  });

  it('should handle accessibility live region', () => {
    const { result } = renderHook(() => useAccessibilityProps({ accessibilityLiveRegion: 'polite' }));
    
    expect(result.current.accessibilityLiveRegion).toBe('polite');
  });

  it('should handle accessibility view is modal', () => {
    const { result } = renderHook(() => useAccessibilityProps({ accessibilityViewIsModal: true }));
    
    expect(result.current.accessibilityViewIsModal).toBe(true);
  });

  it('should handle accessibility elements hidden', () => {
    const { result } = renderHook(() => useAccessibilityProps({ accessibilityElementsHidden: true }));
    
    expect(result.current.accessibilityElementsHidden).toBe(true);
  });

  it('should handle accessibility ignored by accessibility', () => {
    const { result } = renderHook(() => useAccessibilityProps({ accessibilityIgnoresInvertColors: true }));
    
    expect(result.current.accessibilityIgnoresInvertColors).toBe(true);
  });
}); 