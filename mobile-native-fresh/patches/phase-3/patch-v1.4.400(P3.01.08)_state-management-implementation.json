{
  "patchId": "patch-v1.4.400(P3.01.08)_state-management-implementation",
  "version": "v1.4.400",
  "phase": 3,
  "step": "3.01.08",
  "description": "State Management Implementation",
  "priority": "high",
  "risk": "medium",
  "estimatedTime": "2-3 hours",
  "dependencies": [
    "patch-v1.4.400(P3.01.01)_autoroleview-enhancement",
    "patch-v1.4.400(P3.01.02)_performance-monitor-fix",
    "patch-v1.4.400(P3.01.03)_validation-system-fix",
    "patch-v1.4.400(P3.01.04)_environment-system-fix",
    "patch-v1.4.400(P3.01.05)_theme-system-implementation",
    "patch-v1.4.400(P3.01.06)_accessibility-hooks-implementation",
    "patch-v1.4.400(P3.01.07)_navigation-system-implementation"
  ],
  "validationGates": [
    "typescript",
    "eslint",
    "state-management",
    "dual-mount-toggle"
  ],
  "successCriteria": [
    "State management system properly implemented",
    "All state stores defined with proper types",
    "State persistence working",
    "No TypeScript errors in state files",
    "State management tests pass"
  ],
  "rollbackPlan": "Revert to legacy state management",
  "gitTag": "v1.4.400-P3.01.08",
  "summaryFile": "mobile-native-fresh/tasks/summaries/patch-v1.4.400(P3.01.08)_state-management-implementation.md",
  "branch": "phase-3-state-management",
  "preMutationBuild": "npm run lint:guard && npx tsc --noEmit",
  "postMutationBuild": "npm run lint:guard && npx tsc --noEmit && npm run test:state",
  "mutations": [
    {
      "file": "mobile-native-fresh/src-nextgen/state/types.ts",
      "description": "Define state management types and interfaces",
      "content": "export interface User {\n  id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n  isPremium: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n  token: string | null;\n}\n\nexport interface Thoughtmark {\n  id: string;\n  title: string;\n  content: string;\n  tags: string[];\n  binId: string;\n  createdAt: string;\n  updatedAt: string;\n  isArchived: boolean;\n  isPinned: boolean;\n}\n\nexport interface Bin {\n  id: string;\n  name: string;\n  description?: string;\n  color: string;\n  thoughtmarkCount: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Task {\n  id: string;\n  title: string;\n  description?: string;\n  isCompleted: boolean;\n  priority: 'low' | 'medium' | 'high';\n  dueDate?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface AppState {\n  currentEnvironment: 'legacy' | 'nextgen';\n  isFirstLaunch: boolean;\n  onboardingCompleted: boolean;\n  theme: 'light' | 'dark' | 'system';\n  notifications: boolean;\n  analytics: boolean;\n}\n\nexport interface UIState {\n  isLoading: boolean;\n  error: string | null;\n  modal: {\n    isVisible: boolean;\n    type: string | null;\n    data: any;\n  };\n  sidebar: {\n    isOpen: boolean;\n  };\n  search: {\n    query: string;\n    isActive: boolean;\n    results: any[];\n  };\n}\n\nexport interface RootState {\n  auth: AuthState;\n  thoughtmarks: Thoughtmark[];\n  bins: Bin[];\n  tasks: Task[];\n  app: AppState;\n  ui: UIState;\n}"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/state/stores/authStore.ts",
      "description": "Create authentication state store using Zustand",
      "content": "import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { AuthState, User } from '../types';\n\nexport interface AuthStore extends AuthState {\n  // Actions\n  setUser: (user: User | null) => void;\n  setToken: (token: string | null) => void;\n  setLoading: (isLoading: boolean) => void;\n  setError: (error: string | null) => void;\n  login: (user: User, token: string) => void;\n  logout: () => void;\n  clearError: () => void;\n  updateUser: (updates: Partial<User>) => void;\n}\n\nexport const useAuthStore = create<AuthStore>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      user: null,\n      isAuthenticated: false,\n      isLoading: false,\n      error: null,\n      token: null,\n\n      // Actions\n      setUser: (user) =>\n        set({\n          user,\n          isAuthenticated: !!user,\n        }),\n\n      setToken: (token) =>\n        set({ token }),\n\n      setLoading: (isLoading) =>\n        set({ isLoading }),\n\n      setError: (error) =>\n        set({ error }),\n\n      login: (user, token) =>\n        set({\n          user,\n          token,\n          isAuthenticated: true,\n          error: null,\n          isLoading: false,\n        }),\n\n      logout: () =>\n        set({\n          user: null,\n          token: null,\n          isAuthenticated: false,\n          error: null,\n          isLoading: false,\n        }),\n\n      clearError: () =>\n        set({ error: null }),\n\n      updateUser: (updates) => {\n        const { user } = get();\n        if (user) {\n          set({\n            user: { ...user, ...updates },\n          });\n        }\n      },\n    }),\n    {\n      name: 'auth-storage',\n      storage: createJSONStorage(() => AsyncStorage),\n      partialize: (state) => ({\n        user: state.user,\n        token: state.token,\n        isAuthenticated: state.isAuthenticated,\n      }),\n    }\n  )\n);"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/state/stores/appStore.ts",
      "description": "Create app state store using Zustand",
      "content": "import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { AppState } from '../types';\n\nexport interface AppStore extends AppState {\n  // Actions\n  setEnvironment: (environment: 'legacy' | 'nextgen') => void;\n  setFirstLaunch: (isFirstLaunch: boolean) => void;\n  setOnboardingCompleted: (completed: boolean) => void;\n  setTheme: (theme: 'light' | 'dark' | 'system') => void;\n  setNotifications: (enabled: boolean) => void;\n  setAnalytics: (enabled: boolean) => void;\n  resetApp: () => void;\n}\n\nexport const useAppStore = create<AppStore>()(\n  persist(\n    (set) => ({\n      // Initial state\n      currentEnvironment: 'legacy',\n      isFirstLaunch: true,\n      onboardingCompleted: false,\n      theme: 'system',\n      notifications: true,\n      analytics: true,\n\n      // Actions\n      setEnvironment: (currentEnvironment) =>\n        set({ currentEnvironment }),\n\n      setFirstLaunch: (isFirstLaunch) =>\n        set({ isFirstLaunch }),\n\n      setOnboardingCompleted: (onboardingCompleted) =>\n        set({ onboardingCompleted }),\n\n      setTheme: (theme) =>\n        set({ theme }),\n\n      setNotifications: (notifications) =>\n        set({ notifications }),\n\n      setAnalytics: (analytics) =>\n        set({ analytics }),\n\n      resetApp: () =>\n        set({\n          currentEnvironment: 'legacy',\n          isFirstLaunch: true,\n          onboardingCompleted: false,\n          theme: 'system',\n          notifications: true,\n          analytics: true,\n        }),\n    }),\n    {\n      name: 'app-storage',\n      storage: createJSONStorage(() => AsyncStorage),\n      partialize: (state) => ({\n        currentEnvironment: state.currentEnvironment,\n        isFirstLaunch: state.isFirstLaunch,\n        onboardingCompleted: state.onboardingCompleted,\n        theme: state.theme,\n        notifications: state.notifications,\n        analytics: state.analytics,\n      }),\n    }\n  )\n);"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/state/stores/uiStore.ts",
      "description": "Create UI state store using Zustand",
      "content": "import { create } from 'zustand';\nimport { UIState } from '../types';\n\nexport interface UIStore extends UIState {\n  // Actions\n  setLoading: (isLoading: boolean) => void;\n  setError: (error: string | null) => void;\n  showModal: (type: string, data?: any) => void;\n  hideModal: () => void;\n  toggleSidebar: () => void;\n  setSidebarOpen: (isOpen: boolean) => void;\n  setSearchQuery: (query: string) => void;\n  setSearchActive: (isActive: boolean) => void;\n  setSearchResults: (results: any[]) => void;\n  clearSearch: () => void;\n  clearError: () => void;\n}\n\nexport const useUIStore = create<UIStore>((set, get) => ({\n  // Initial state\n  isLoading: false,\n  error: null,\n  modal: {\n    isVisible: false,\n    type: null,\n    data: null,\n  },\n  sidebar: {\n    isOpen: false,\n  },\n  search: {\n    query: '',\n    isActive: false,\n    results: [],\n  },\n\n  // Actions\n  setLoading: (isLoading) =>\n    set({ isLoading }),\n\n  setError: (error) =>\n    set({ error }),\n\n  showModal: (type, data) =>\n    set({\n      modal: {\n        isVisible: true,\n        type,\n        data: data || null,\n      },\n    }),\n\n  hideModal: () =>\n    set({\n      modal: {\n        isVisible: false,\n        type: null,\n        data: null,\n      },\n    }),\n\n  toggleSidebar: () =>\n    set((state) => ({\n      sidebar: {\n        isOpen: !state.sidebar.isOpen,\n      },\n    })),\n\n  setSidebarOpen: (isOpen) =>\n    set({\n      sidebar: {\n        isOpen,\n      },\n    }),\n\n  setSearchQuery: (query) =>\n    set((state) => ({\n      search: {\n        ...state.search,\n        query,\n      },\n    })),\n\n  setSearchActive: (isActive) =>\n    set((state) => ({\n      search: {\n        ...state.search,\n        isActive,\n      },\n    })),\n\n  setSearchResults: (results) =>\n    set((state) => ({\n      search: {\n        ...state.search,\n        results,\n      },\n    })),\n\n  clearSearch: () =>\n    set({\n      search: {\n        query: '',\n        isActive: false,\n        results: [],\n      },\n    }),\n\n  clearError: () =>\n    set({ error: null }),\n}));"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/state/index.ts",
      "description": "Export state management components and types",
      "content": "export * from './types';\nexport * from './stores/authStore';\nexport * from './stores/appStore';\nexport * from './stores/uiStore';\n\nexport { useAuthStore } from './stores/authStore';\nexport { useAppStore } from './stores/appStore';\nexport { useUIStore } from './stores/uiStore';"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/state/stores/authStore.test.ts",
      "description": "Create comprehensive tests for auth store",
      "content": "import { renderHook, act } from '@testing-library/react-native';\nimport { useAuthStore } from './authStore';\nimport { User } from '../types';\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () => ({\n  setItem: jest.fn(),\n  getItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n}));\n\nconst mockUser: User = {\n  id: '1',\n  email: 'test@example.com',\n  name: 'Test User',\n  isPremium: false,\n  createdAt: '2023-01-01T00:00:00Z',\n  updatedAt: '2023-01-01T00:00:00Z',\n};\n\ndescribe('AuthStore', () => {\n  beforeEach(() => {\n    // Clear store state before each test\n    act(() => {\n      useAuthStore.getState().logout();\n    });\n  });\n\n  it('should have initial state', () => {\n    const { result } = renderHook(() => useAuthStore());\n    \n    expect(result.current.user).toBeNull();\n    expect(result.current.isAuthenticated).toBe(false);\n    expect(result.current.isLoading).toBe(false);\n    expect(result.current.error).toBeNull();\n    expect(result.current.token).toBeNull();\n  });\n\n  it('should set user', () => {\n    const { result } = renderHook(() => useAuthStore());\n    \n    act(() => {\n      result.current.setUser(mockUser);\n    });\n    \n    expect(result.current.user).toEqual(mockUser);\n    expect(result.current.isAuthenticated).toBe(true);\n  });\n\n  it('should set token', () => {\n    const { result } = renderHook(() => useAuthStore());\n    const token = 'test-token';\n    \n    act(() => {\n      result.current.setToken(token);\n    });\n    \n    expect(result.current.token).toBe(token);\n  });\n\n  it('should set loading state', () => {\n    const { result } = renderHook(() => useAuthStore());\n    \n    act(() => {\n      result.current.setLoading(true);\n    });\n    \n    expect(result.current.isLoading).toBe(true);\n  });\n\n  it('should set error', () => {\n    const { result } = renderHook(() => useAuthStore());\n    const error = 'Test error';\n    \n    act(() => {\n      result.current.setError(error);\n    });\n    \n    expect(result.current.error).toBe(error);\n  });\n\n  it('should login user', () => {\n    const { result } = renderHook(() => useAuthStore());\n    const token = 'test-token';\n    \n    act(() => {\n      result.current.login(mockUser, token);\n    });\n    \n    expect(result.current.user).toEqual(mockUser);\n    expect(result.current.token).toBe(token);\n    expect(result.current.isAuthenticated).toBe(true);\n    expect(result.current.error).toBeNull();\n    expect(result.current.isLoading).toBe(false);\n  });\n\n  it('should logout user', () => {\n    const { result } = renderHook(() => useAuthStore());\n    \n    // First login\n    act(() => {\n      result.current.login(mockUser, 'test-token');\n    });\n    \n    // Then logout\n    act(() => {\n      result.current.logout();\n    });\n    \n    expect(result.current.user).toBeNull();\n    expect(result.current.token).toBeNull();\n    expect(result.current.isAuthenticated).toBe(false);\n    expect(result.current.error).toBeNull();\n    expect(result.current.isLoading).toBe(false);\n  });\n\n  it('should clear error', () => {\n    const { result } = renderHook(() => useAuthStore());\n    \n    act(() => {\n      result.current.setError('Test error');\n      result.current.clearError();\n    });\n    \n    expect(result.current.error).toBeNull();\n  });\n\n  it('should update user', () => {\n    const { result } = renderHook(() => useAuthStore());\n    \n    act(() => {\n      result.current.setUser(mockUser);\n      result.current.updateUser({ name: 'Updated Name' });\n    });\n    \n    expect(result.current.user?.name).toBe('Updated Name');\n    expect(result.current.user?.email).toBe(mockUser.email);\n  });\n});"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/state/stores/appStore.test.ts",
      "description": "Create comprehensive tests for app store",
      "content": "import { renderHook, act } from '@testing-library/react-native';\nimport { useAppStore } from './appStore';\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () => ({\n  setItem: jest.fn(),\n  getItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n}));\n\ndescribe('AppStore', () => {\n  beforeEach(() => {\n    // Clear store state before each test\n    act(() => {\n      useAppStore.getState().resetApp();\n    });\n  });\n\n  it('should have initial state', () => {\n    const { result } = renderHook(() => useAppStore());\n    \n    expect(result.current.currentEnvironment).toBe('legacy');\n    expect(result.current.isFirstLaunch).toBe(true);\n    expect(result.current.onboardingCompleted).toBe(false);\n    expect(result.current.theme).toBe('system');\n    expect(result.current.notifications).toBe(true);\n    expect(result.current.analytics).toBe(true);\n  });\n\n  it('should set environment', () => {\n    const { result } = renderHook(() => useAppStore());\n    \n    act(() => {\n      result.current.setEnvironment('nextgen');\n    });\n    \n    expect(result.current.currentEnvironment).toBe('nextgen');\n  });\n\n  it('should set first launch', () => {\n    const { result } = renderHook(() => useAppStore());\n    \n    act(() => {\n      result.current.setFirstLaunch(false);\n    });\n    \n    expect(result.current.isFirstLaunch).toBe(false);\n  });\n\n  it('should set onboarding completed', () => {\n    const { result } = renderHook(() => useAppStore());\n    \n    act(() => {\n      result.current.setOnboardingCompleted(true);\n    });\n    \n    expect(result.current.onboardingCompleted).toBe(true);\n  });\n\n  it('should set theme', () => {\n    const { result } = renderHook(() => useAppStore());\n    \n    act(() => {\n      result.current.setTheme('dark');\n    });\n    \n    expect(result.current.theme).toBe('dark');\n  });\n\n  it('should set notifications', () => {\n    const { result } = renderHook(() => useAppStore());\n    \n    act(() => {\n      result.current.setNotifications(false);\n    });\n    \n    expect(result.current.notifications).toBe(false);\n  });\n\n  it('should set analytics', () => {\n    const { result } = renderHook(() => useAppStore());\n    \n    act(() => {\n      result.current.setAnalytics(false);\n    });\n    \n    expect(result.current.analytics).toBe(false);\n  });\n\n  it('should reset app', () => {\n    const { result } = renderHook(() => useAppStore());\n    \n    // Change some values\n    act(() => {\n      result.current.setEnvironment('nextgen');\n      result.current.setFirstLaunch(false);\n      result.current.setOnboardingCompleted(true);\n      result.current.setTheme('dark');\n      result.current.setNotifications(false);\n      result.current.setAnalytics(false);\n    });\n    \n    // Reset\n    act(() => {\n      result.current.resetApp();\n    });\n    \n    expect(result.current.currentEnvironment).toBe('legacy');\n    expect(result.current.isFirstLaunch).toBe(true);\n    expect(result.current.onboardingCompleted).toBe(false);\n    expect(result.current.theme).toBe('system');\n    expect(result.current.notifications).toBe(true);\n    expect(result.current.analytics).toBe(true);\n  });\n});"
    },
    {
      "file": "mobile-native-fresh/src-nextgen/state/stores/uiStore.test.ts",
      "description": "Create comprehensive tests for UI store",
      "content": "import { renderHook, act } from '@testing-library/react-native';\nimport { useUIStore } from './uiStore';\n\ndescribe('UIStore', () => {\n  beforeEach(() => {\n    // Clear store state before each test\n    act(() => {\n      useUIStore.getState().clearError();\n      useUIStore.getState().hideModal();\n      useUIStore.getState().setSidebarOpen(false);\n      useUIStore.getState().clearSearch();\n    });\n  });\n\n  it('should have initial state', () => {\n    const { result } = renderHook(() => useUIStore());\n    \n    expect(result.current.isLoading).toBe(false);\n    expect(result.current.error).toBeNull();\n    expect(result.current.modal.isVisible).toBe(false);\n    expect(result.current.modal.type).toBeNull();\n    expect(result.current.modal.data).toBeNull();\n    expect(result.current.sidebar.isOpen).toBe(false);\n    expect(result.current.search.query).toBe('');\n    expect(result.current.search.isActive).toBe(false);\n    expect(result.current.search.results).toEqual([]);\n  });\n\n  it('should set loading state', () => {\n    const { result } = renderHook(() => useUIStore());\n    \n    act(() => {\n      result.current.setLoading(true);\n    });\n    \n    expect(result.current.isLoading).toBe(true);\n  });\n\n  it('should set error', () => {\n    const { result } = renderHook(() => useUIStore());\n    const error = 'Test error';\n    \n    act(() => {\n      result.current.setError(error);\n    });\n    \n    expect(result.current.error).toBe(error);\n  });\n\n  it('should show modal', () => {\n    const { result } = renderHook(() => useUIStore());\n    const modalData = { test: 'data' };\n    \n    act(() => {\n      result.current.showModal('test-modal', modalData);\n    });\n    \n    expect(result.current.modal.isVisible).toBe(true);\n    expect(result.current.modal.type).toBe('test-modal');\n    expect(result.current.modal.data).toEqual(modalData);\n  });\n\n  it('should hide modal', () => {\n    const { result } = renderHook(() => useUIStore());\n    \n    act(() => {\n      result.current.showModal('test-modal');\n      result.current.hideModal();\n    });\n    \n    expect(result.current.modal.isVisible).toBe(false);\n    expect(result.current.modal.type).toBeNull();\n    expect(result.current.modal.data).toBeNull();\n  });\n\n  it('should toggle sidebar', () => {\n    const { result } = renderHook(() => useUIStore());\n    \n    act(() => {\n      result.current.toggleSidebar();\n    });\n    \n    expect(result.current.sidebar.isOpen).toBe(true);\n    \n    act(() => {\n      result.current.toggleSidebar();\n    });\n    \n    expect(result.current.sidebar.isOpen).toBe(false);\n  });\n\n  it('should set sidebar open', () => {\n    const { result } = renderHook(() => useUIStore());\n    \n    act(() => {\n      result.current.setSidebarOpen(true);\n    });\n    \n    expect(result.current.sidebar.isOpen).toBe(true);\n  });\n\n  it('should set search query', () => {\n    const { result } = renderHook(() => useUIStore());\n    const query = 'test query';\n    \n    act(() => {\n      result.current.setSearchQuery(query);\n    });\n    \n    expect(result.current.search.query).toBe(query);\n  });\n\n  it('should set search active', () => {\n    const { result } = renderHook(() => useUIStore());\n    \n    act(() => {\n      result.current.setSearchActive(true);\n    });\n    \n    expect(result.current.search.isActive).toBe(true);\n  });\n\n  it('should set search results', () => {\n    const { result } = renderHook(() => useUIStore());\n    const results = [{ id: '1', title: 'Test' }];\n    \n    act(() => {\n      result.current.setSearchResults(results);\n    });\n    \n    expect(result.current.search.results).toEqual(results);\n  });\n\n  it('should clear search', () => {\n    const { result } = renderHook(() => useUIStore());\n    \n    act(() => {\n      result.current.setSearchQuery('test');\n      result.current.setSearchActive(true);\n      result.current.setSearchResults([{ id: '1' }]);\n      result.current.clearSearch();\n    });\n    \n    expect(result.current.search.query).toBe('');\n    expect(result.current.search.isActive).toBe(false);\n    expect(result.current.search.results).toEqual([]);\n  });\n\n  it('should clear error', () => {\n    const { result } = renderHook(() => useUIStore());\n    \n    act(() => {\n      result.current.setError('Test error');\n      result.current.clearError();\n    });\n    \n    expect(result.current.error).toBeNull();\n  });\n});"
    }
  ]
} 