import React from 'react';
import { View, Text } from 'react-native';
import { render } from '@/__tests__/helpers/test-utils';
import { PerformanceMonitor } from './PerformanceMonitor';

const TestComponent: React.FC<{ testID?: string }> = ({ testID }) => (
  <View testID={testID}>
    <Text>Test Component</Text>
  </View>
);

describe('PerformanceMonitor Integration', () => {
  let performanceMonitor: PerformanceMonitor;

  beforeEach(() => {
    performanceMonitor = PerformanceMonitor.getInstance();
  });

  afterEach(() => {
    performanceMonitor.destroy();
  });

  it('should monitor component render time', () => {
    const startTime = performance.now();
    
    render(<TestComponent testID="test-component" />);
    
    const endTime = performance.now();
    const renderTime = endTime - startTime;
    
    expect(renderTime).toBeGreaterThan(0);
  });

  it('should record component metrics', () => {
    const recordComponentMetricsSpy = jest.spyOn(performanceMonitor, 'recordComponentMetrics');
    
    render(<TestComponent testID="test-component" />);
    
    expect(recordComponentMetricsSpy).toHaveBeenCalled();
  });

  it('should detect memory leaks', () => {
    const detectMemoryLeaksSpy = jest.spyOn(performanceMonitor, 'detectMemoryLeaks');
    
    // Simulate component mounting and unmounting
    const { unmount } = render(<TestComponent testID="test-component" />);
    unmount();
    
    expect(detectMemoryLeaksSpy).toHaveBeenCalled();
  });

  it('should establish performance baselines', () => {
    const establishBaselineSpy = jest.spyOn(performanceMonitor, 'establishBaseline');
    
    render(<TestComponent testID="test-component" />);
    
    expect(establishBaselineSpy).toHaveBeenCalled();
  });

  it('should handle multiple component renders', () => {
    const recordComponentMetricsSpy = jest.spyOn(performanceMonitor, 'recordComponentMetrics');
    
    // Render multiple components
    render(<TestComponent testID="component-1" />);
    render(<TestComponent testID="component-2" />);
    render(<TestComponent testID="component-3" />);
    
    expect(recordComponentMetricsSpy).toHaveBeenCalledTimes(3);
  });

  it('should provide performance statistics', () => {
    render(<TestComponent testID="test-component" />);
    
    const stats = performanceMonitor.getPerformanceStatistics();
    
    expect(stats).toHaveProperty('totalComponents');
    expect(stats).toHaveProperty('averageRenderTime');
    expect(stats).toHaveProperty('memoryUsage');
    expect(stats).toHaveProperty('startupTime');
  });
}); 